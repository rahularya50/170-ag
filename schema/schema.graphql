# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# Boilerplate

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

interface Node {
  id: ID!
}

scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor!
  endCursor: Cursor!
}

type Query {
  viewer: User
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node!]!
  user(id: ID!): User
  coding_problem(id: ID!): CodingProblem
  coding_problems(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    include_unreleased: Boolean! = false
  ): CodingProblemConnection!
}

type Mutation {
  new_user(name: String): User
  new_problem(input: CodingProblemInput): CodingProblem!
  save_draft(input: CodingDraftInput): CodingDraft!
  create_submission(input: CodingSubmissionInput): CodingSubmission!
}

type User implements Node {
  id: ID!
  email: String!
  name: String
  is_staff: Boolean!
}

type CodingProblem implements Node {
  id: ID!
  name: String!
  statement: String!
  released: Boolean!
  my_draft: CodingDraft
  my_submissions(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
  ): CodingSubmissionConnection!
  all_submissions(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
  ): CodingSubmissionConnection!
  test_cases: [CodingTestCase]!
}

type CodingProblemConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodingProblemEdge!]!
}

type CodingProblemEdge {
  node: CodingProblem!
  cursor: Cursor!
}

input CodingProblemInput {
  name: String!
  statement: String!
  released: Boolean!
}

type CodingTestCase implements Node {
  id: ID!
  points: Int!
  input: String!
  output: String!
  coding_problem: CodingProblem!
}

type CodingDraft implements Node {
  id: ID!
  author: User!
  code: String!
  coding_problem: CodingProblem!
}

input CodingDraftInput {
  problem_id: ID!
  code: String!
}

enum CodingSubmissionStatus
  @goModel(model: "170-ag/ent/generated/codingsubmission.Status") {
  QUEUED
  RUNNING
  COMPLETED
}

type CodingSubmission implements Node {
  id: ID!
  author: User!
  code: String!
  coding_problem: CodingProblem!
  status: CodingSubmissionStatus!
  staff_data: CodingSubmissionStaffData!
}

input CodingSubmissionInput {
  problem_id: ID!
  code: String!
}

type CodingSubmissionConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CodingSubmissionEdge!]!
}

type CodingSubmissionEdge {
  node: CodingSubmission!
  cursor: Cursor!
}

type CodingSubmissionStaffData implements Node {
  id: ID!
  execution_id: String
  input: String!
  output: String
  coding_submission: CodingSubmission!
  stderr: String
  exit_error: String
}
