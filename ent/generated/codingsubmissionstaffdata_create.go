// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingsubmission"
	"170-ag/ent/generated/codingsubmissionstaffdata"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingSubmissionStaffDataCreate is the builder for creating a CodingSubmissionStaffData entity.
type CodingSubmissionStaffDataCreate struct {
	config
	mutation *CodingSubmissionStaffDataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cssdc *CodingSubmissionStaffDataCreate) SetCreateTime(t time.Time) *CodingSubmissionStaffDataCreate {
	cssdc.mutation.SetCreateTime(t)
	return cssdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cssdc *CodingSubmissionStaffDataCreate) SetNillableCreateTime(t *time.Time) *CodingSubmissionStaffDataCreate {
	if t != nil {
		cssdc.SetCreateTime(*t)
	}
	return cssdc
}

// SetUpdateTime sets the "update_time" field.
func (cssdc *CodingSubmissionStaffDataCreate) SetUpdateTime(t time.Time) *CodingSubmissionStaffDataCreate {
	cssdc.mutation.SetUpdateTime(t)
	return cssdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cssdc *CodingSubmissionStaffDataCreate) SetNillableUpdateTime(t *time.Time) *CodingSubmissionStaffDataCreate {
	if t != nil {
		cssdc.SetUpdateTime(*t)
	}
	return cssdc
}

// SetExecutionID sets the "execution_id" field.
func (cssdc *CodingSubmissionStaffDataCreate) SetExecutionID(i int64) *CodingSubmissionStaffDataCreate {
	cssdc.mutation.SetExecutionID(i)
	return cssdc
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (cssdc *CodingSubmissionStaffDataCreate) SetNillableExecutionID(i *int64) *CodingSubmissionStaffDataCreate {
	if i != nil {
		cssdc.SetExecutionID(*i)
	}
	return cssdc
}

// SetInput sets the "input" field.
func (cssdc *CodingSubmissionStaffDataCreate) SetInput(s string) *CodingSubmissionStaffDataCreate {
	cssdc.mutation.SetInput(s)
	return cssdc
}

// SetOutput sets the "output" field.
func (cssdc *CodingSubmissionStaffDataCreate) SetOutput(s string) *CodingSubmissionStaffDataCreate {
	cssdc.mutation.SetOutput(s)
	return cssdc
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (cssdc *CodingSubmissionStaffDataCreate) SetNillableOutput(s *string) *CodingSubmissionStaffDataCreate {
	if s != nil {
		cssdc.SetOutput(*s)
	}
	return cssdc
}

// SetStderr sets the "stderr" field.
func (cssdc *CodingSubmissionStaffDataCreate) SetStderr(s string) *CodingSubmissionStaffDataCreate {
	cssdc.mutation.SetStderr(s)
	return cssdc
}

// SetNillableStderr sets the "stderr" field if the given value is not nil.
func (cssdc *CodingSubmissionStaffDataCreate) SetNillableStderr(s *string) *CodingSubmissionStaffDataCreate {
	if s != nil {
		cssdc.SetStderr(*s)
	}
	return cssdc
}

// SetExitError sets the "exit_error" field.
func (cssdc *CodingSubmissionStaffDataCreate) SetExitError(s string) *CodingSubmissionStaffDataCreate {
	cssdc.mutation.SetExitError(s)
	return cssdc
}

// SetNillableExitError sets the "exit_error" field if the given value is not nil.
func (cssdc *CodingSubmissionStaffDataCreate) SetNillableExitError(s *string) *CodingSubmissionStaffDataCreate {
	if s != nil {
		cssdc.SetExitError(*s)
	}
	return cssdc
}

// SetCodingSubmissionID sets the "coding_submission" edge to the CodingSubmission entity by ID.
func (cssdc *CodingSubmissionStaffDataCreate) SetCodingSubmissionID(id int) *CodingSubmissionStaffDataCreate {
	cssdc.mutation.SetCodingSubmissionID(id)
	return cssdc
}

// SetCodingSubmission sets the "coding_submission" edge to the CodingSubmission entity.
func (cssdc *CodingSubmissionStaffDataCreate) SetCodingSubmission(c *CodingSubmission) *CodingSubmissionStaffDataCreate {
	return cssdc.SetCodingSubmissionID(c.ID)
}

// Mutation returns the CodingSubmissionStaffDataMutation object of the builder.
func (cssdc *CodingSubmissionStaffDataCreate) Mutation() *CodingSubmissionStaffDataMutation {
	return cssdc.mutation
}

// Save creates the CodingSubmissionStaffData in the database.
func (cssdc *CodingSubmissionStaffDataCreate) Save(ctx context.Context) (*CodingSubmissionStaffData, error) {
	var (
		err  error
		node *CodingSubmissionStaffData
	)
	if err := cssdc.defaults(); err != nil {
		return nil, err
	}
	if len(cssdc.hooks) == 0 {
		if err = cssdc.check(); err != nil {
			return nil, err
		}
		node, err = cssdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingSubmissionStaffDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cssdc.check(); err != nil {
				return nil, err
			}
			cssdc.mutation = mutation
			if node, err = cssdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cssdc.hooks) - 1; i >= 0; i-- {
			if cssdc.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cssdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cssdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cssdc *CodingSubmissionStaffDataCreate) SaveX(ctx context.Context) *CodingSubmissionStaffData {
	v, err := cssdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cssdc *CodingSubmissionStaffDataCreate) Exec(ctx context.Context) error {
	_, err := cssdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cssdc *CodingSubmissionStaffDataCreate) ExecX(ctx context.Context) {
	if err := cssdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cssdc *CodingSubmissionStaffDataCreate) defaults() error {
	if _, ok := cssdc.mutation.CreateTime(); !ok {
		if codingsubmissionstaffdata.DefaultCreateTime == nil {
			return fmt.Errorf("generated: uninitialized codingsubmissionstaffdata.DefaultCreateTime (forgotten import generated/runtime?)")
		}
		v := codingsubmissionstaffdata.DefaultCreateTime()
		cssdc.mutation.SetCreateTime(v)
	}
	if _, ok := cssdc.mutation.UpdateTime(); !ok {
		if codingsubmissionstaffdata.DefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingsubmissionstaffdata.DefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingsubmissionstaffdata.DefaultUpdateTime()
		cssdc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cssdc *CodingSubmissionStaffDataCreate) check() error {
	if _, ok := cssdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "CodingSubmissionStaffData.create_time"`)}
	}
	if _, ok := cssdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "CodingSubmissionStaffData.update_time"`)}
	}
	if _, ok := cssdc.mutation.Input(); !ok {
		return &ValidationError{Name: "input", err: errors.New(`generated: missing required field "CodingSubmissionStaffData.input"`)}
	}
	if v, ok := cssdc.mutation.Output(); ok {
		if err := codingsubmissionstaffdata.OutputValidator(v); err != nil {
			return &ValidationError{Name: "output", err: fmt.Errorf(`generated: validator failed for field "CodingSubmissionStaffData.output": %w`, err)}
		}
	}
	if v, ok := cssdc.mutation.Stderr(); ok {
		if err := codingsubmissionstaffdata.StderrValidator(v); err != nil {
			return &ValidationError{Name: "stderr", err: fmt.Errorf(`generated: validator failed for field "CodingSubmissionStaffData.stderr": %w`, err)}
		}
	}
	if v, ok := cssdc.mutation.ExitError(); ok {
		if err := codingsubmissionstaffdata.ExitErrorValidator(v); err != nil {
			return &ValidationError{Name: "exit_error", err: fmt.Errorf(`generated: validator failed for field "CodingSubmissionStaffData.exit_error": %w`, err)}
		}
	}
	if _, ok := cssdc.mutation.CodingSubmissionID(); !ok {
		return &ValidationError{Name: "coding_submission", err: errors.New(`generated: missing required edge "CodingSubmissionStaffData.coding_submission"`)}
	}
	return nil
}

func (cssdc *CodingSubmissionStaffDataCreate) sqlSave(ctx context.Context) (*CodingSubmissionStaffData, error) {
	_node, _spec := cssdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cssdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cssdc *CodingSubmissionStaffDataCreate) createSpec() (*CodingSubmissionStaffData, *sqlgraph.CreateSpec) {
	var (
		_node = &CodingSubmissionStaffData{config: cssdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: codingsubmissionstaffdata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingsubmissionstaffdata.FieldID,
			},
		}
	)
	_spec.OnConflict = cssdc.conflict
	if value, ok := cssdc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cssdc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cssdc.mutation.ExecutionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldExecutionID,
		})
		_node.ExecutionID = &value
	}
	if value, ok := cssdc.mutation.Input(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldInput,
		})
		_node.Input = value
	}
	if value, ok := cssdc.mutation.Output(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldOutput,
		})
		_node.Output = &value
	}
	if value, ok := cssdc.mutation.Stderr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldStderr,
		})
		_node.Stderr = &value
	}
	if value, ok := cssdc.mutation.ExitError(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldExitError,
		})
		_node.ExitError = &value
	}
	if nodes := cssdc.mutation.CodingSubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingsubmissionstaffdata.CodingSubmissionTable,
			Columns: []string{codingsubmissionstaffdata.CodingSubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingsubmission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingSubmissionStaffData.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingSubmissionStaffDataUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (cssdc *CodingSubmissionStaffDataCreate) OnConflict(opts ...sql.ConflictOption) *CodingSubmissionStaffDataUpsertOne {
	cssdc.conflict = opts
	return &CodingSubmissionStaffDataUpsertOne{
		create: cssdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingSubmissionStaffData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cssdc *CodingSubmissionStaffDataCreate) OnConflictColumns(columns ...string) *CodingSubmissionStaffDataUpsertOne {
	cssdc.conflict = append(cssdc.conflict, sql.ConflictColumns(columns...))
	return &CodingSubmissionStaffDataUpsertOne{
		create: cssdc,
	}
}

type (
	// CodingSubmissionStaffDataUpsertOne is the builder for "upsert"-ing
	//  one CodingSubmissionStaffData node.
	CodingSubmissionStaffDataUpsertOne struct {
		create *CodingSubmissionStaffDataCreate
	}

	// CodingSubmissionStaffDataUpsert is the "OnConflict" setter.
	CodingSubmissionStaffDataUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *CodingSubmissionStaffDataUpsert) SetCreateTime(v time.Time) *CodingSubmissionStaffDataUpsert {
	u.Set(codingsubmissionstaffdata.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsert) UpdateCreateTime() *CodingSubmissionStaffDataUpsert {
	u.SetExcluded(codingsubmissionstaffdata.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingSubmissionStaffDataUpsert) SetUpdateTime(v time.Time) *CodingSubmissionStaffDataUpsert {
	u.Set(codingsubmissionstaffdata.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsert) UpdateUpdateTime() *CodingSubmissionStaffDataUpsert {
	u.SetExcluded(codingsubmissionstaffdata.FieldUpdateTime)
	return u
}

// SetExecutionID sets the "execution_id" field.
func (u *CodingSubmissionStaffDataUpsert) SetExecutionID(v int64) *CodingSubmissionStaffDataUpsert {
	u.Set(codingsubmissionstaffdata.FieldExecutionID, v)
	return u
}

// UpdateExecutionID sets the "execution_id" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsert) UpdateExecutionID() *CodingSubmissionStaffDataUpsert {
	u.SetExcluded(codingsubmissionstaffdata.FieldExecutionID)
	return u
}

// AddExecutionID adds v to the "execution_id" field.
func (u *CodingSubmissionStaffDataUpsert) AddExecutionID(v int64) *CodingSubmissionStaffDataUpsert {
	u.Add(codingsubmissionstaffdata.FieldExecutionID, v)
	return u
}

// ClearExecutionID clears the value of the "execution_id" field.
func (u *CodingSubmissionStaffDataUpsert) ClearExecutionID() *CodingSubmissionStaffDataUpsert {
	u.SetNull(codingsubmissionstaffdata.FieldExecutionID)
	return u
}

// SetInput sets the "input" field.
func (u *CodingSubmissionStaffDataUpsert) SetInput(v string) *CodingSubmissionStaffDataUpsert {
	u.Set(codingsubmissionstaffdata.FieldInput, v)
	return u
}

// UpdateInput sets the "input" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsert) UpdateInput() *CodingSubmissionStaffDataUpsert {
	u.SetExcluded(codingsubmissionstaffdata.FieldInput)
	return u
}

// SetOutput sets the "output" field.
func (u *CodingSubmissionStaffDataUpsert) SetOutput(v string) *CodingSubmissionStaffDataUpsert {
	u.Set(codingsubmissionstaffdata.FieldOutput, v)
	return u
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsert) UpdateOutput() *CodingSubmissionStaffDataUpsert {
	u.SetExcluded(codingsubmissionstaffdata.FieldOutput)
	return u
}

// ClearOutput clears the value of the "output" field.
func (u *CodingSubmissionStaffDataUpsert) ClearOutput() *CodingSubmissionStaffDataUpsert {
	u.SetNull(codingsubmissionstaffdata.FieldOutput)
	return u
}

// SetStderr sets the "stderr" field.
func (u *CodingSubmissionStaffDataUpsert) SetStderr(v string) *CodingSubmissionStaffDataUpsert {
	u.Set(codingsubmissionstaffdata.FieldStderr, v)
	return u
}

// UpdateStderr sets the "stderr" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsert) UpdateStderr() *CodingSubmissionStaffDataUpsert {
	u.SetExcluded(codingsubmissionstaffdata.FieldStderr)
	return u
}

// ClearStderr clears the value of the "stderr" field.
func (u *CodingSubmissionStaffDataUpsert) ClearStderr() *CodingSubmissionStaffDataUpsert {
	u.SetNull(codingsubmissionstaffdata.FieldStderr)
	return u
}

// SetExitError sets the "exit_error" field.
func (u *CodingSubmissionStaffDataUpsert) SetExitError(v string) *CodingSubmissionStaffDataUpsert {
	u.Set(codingsubmissionstaffdata.FieldExitError, v)
	return u
}

// UpdateExitError sets the "exit_error" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsert) UpdateExitError() *CodingSubmissionStaffDataUpsert {
	u.SetExcluded(codingsubmissionstaffdata.FieldExitError)
	return u
}

// ClearExitError clears the value of the "exit_error" field.
func (u *CodingSubmissionStaffDataUpsert) ClearExitError() *CodingSubmissionStaffDataUpsert {
	u.SetNull(codingsubmissionstaffdata.FieldExitError)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CodingSubmissionStaffData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingSubmissionStaffDataUpsertOne) UpdateNewValues() *CodingSubmissionStaffDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(codingsubmissionstaffdata.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CodingSubmissionStaffData.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CodingSubmissionStaffDataUpsertOne) Ignore() *CodingSubmissionStaffDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingSubmissionStaffDataUpsertOne) DoNothing() *CodingSubmissionStaffDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingSubmissionStaffDataCreate.OnConflict
// documentation for more info.
func (u *CodingSubmissionStaffDataUpsertOne) Update(set func(*CodingSubmissionStaffDataUpsert)) *CodingSubmissionStaffDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingSubmissionStaffDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *CodingSubmissionStaffDataUpsertOne) SetCreateTime(v time.Time) *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertOne) UpdateCreateTime() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingSubmissionStaffDataUpsertOne) SetUpdateTime(v time.Time) *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertOne) UpdateUpdateTime() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetExecutionID sets the "execution_id" field.
func (u *CodingSubmissionStaffDataUpsertOne) SetExecutionID(v int64) *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetExecutionID(v)
	})
}

// AddExecutionID adds v to the "execution_id" field.
func (u *CodingSubmissionStaffDataUpsertOne) AddExecutionID(v int64) *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.AddExecutionID(v)
	})
}

// UpdateExecutionID sets the "execution_id" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertOne) UpdateExecutionID() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateExecutionID()
	})
}

// ClearExecutionID clears the value of the "execution_id" field.
func (u *CodingSubmissionStaffDataUpsertOne) ClearExecutionID() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.ClearExecutionID()
	})
}

// SetInput sets the "input" field.
func (u *CodingSubmissionStaffDataUpsertOne) SetInput(v string) *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetInput(v)
	})
}

// UpdateInput sets the "input" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertOne) UpdateInput() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateInput()
	})
}

// SetOutput sets the "output" field.
func (u *CodingSubmissionStaffDataUpsertOne) SetOutput(v string) *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetOutput(v)
	})
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertOne) UpdateOutput() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateOutput()
	})
}

// ClearOutput clears the value of the "output" field.
func (u *CodingSubmissionStaffDataUpsertOne) ClearOutput() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.ClearOutput()
	})
}

// SetStderr sets the "stderr" field.
func (u *CodingSubmissionStaffDataUpsertOne) SetStderr(v string) *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetStderr(v)
	})
}

// UpdateStderr sets the "stderr" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertOne) UpdateStderr() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateStderr()
	})
}

// ClearStderr clears the value of the "stderr" field.
func (u *CodingSubmissionStaffDataUpsertOne) ClearStderr() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.ClearStderr()
	})
}

// SetExitError sets the "exit_error" field.
func (u *CodingSubmissionStaffDataUpsertOne) SetExitError(v string) *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetExitError(v)
	})
}

// UpdateExitError sets the "exit_error" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertOne) UpdateExitError() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateExitError()
	})
}

// ClearExitError clears the value of the "exit_error" field.
func (u *CodingSubmissionStaffDataUpsertOne) ClearExitError() *CodingSubmissionStaffDataUpsertOne {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.ClearExitError()
	})
}

// Exec executes the query.
func (u *CodingSubmissionStaffDataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingSubmissionStaffDataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingSubmissionStaffDataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CodingSubmissionStaffDataUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CodingSubmissionStaffDataUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CodingSubmissionStaffDataCreateBulk is the builder for creating many CodingSubmissionStaffData entities in bulk.
type CodingSubmissionStaffDataCreateBulk struct {
	config
	builders []*CodingSubmissionStaffDataCreate
	conflict []sql.ConflictOption
}

// Save creates the CodingSubmissionStaffData entities in the database.
func (cssdcb *CodingSubmissionStaffDataCreateBulk) Save(ctx context.Context) ([]*CodingSubmissionStaffData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cssdcb.builders))
	nodes := make([]*CodingSubmissionStaffData, len(cssdcb.builders))
	mutators := make([]Mutator, len(cssdcb.builders))
	for i := range cssdcb.builders {
		func(i int, root context.Context) {
			builder := cssdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodingSubmissionStaffDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cssdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cssdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cssdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cssdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cssdcb *CodingSubmissionStaffDataCreateBulk) SaveX(ctx context.Context) []*CodingSubmissionStaffData {
	v, err := cssdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cssdcb *CodingSubmissionStaffDataCreateBulk) Exec(ctx context.Context) error {
	_, err := cssdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cssdcb *CodingSubmissionStaffDataCreateBulk) ExecX(ctx context.Context) {
	if err := cssdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingSubmissionStaffData.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingSubmissionStaffDataUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (cssdcb *CodingSubmissionStaffDataCreateBulk) OnConflict(opts ...sql.ConflictOption) *CodingSubmissionStaffDataUpsertBulk {
	cssdcb.conflict = opts
	return &CodingSubmissionStaffDataUpsertBulk{
		create: cssdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingSubmissionStaffData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cssdcb *CodingSubmissionStaffDataCreateBulk) OnConflictColumns(columns ...string) *CodingSubmissionStaffDataUpsertBulk {
	cssdcb.conflict = append(cssdcb.conflict, sql.ConflictColumns(columns...))
	return &CodingSubmissionStaffDataUpsertBulk{
		create: cssdcb,
	}
}

// CodingSubmissionStaffDataUpsertBulk is the builder for "upsert"-ing
// a bulk of CodingSubmissionStaffData nodes.
type CodingSubmissionStaffDataUpsertBulk struct {
	create *CodingSubmissionStaffDataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CodingSubmissionStaffData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingSubmissionStaffDataUpsertBulk) UpdateNewValues() *CodingSubmissionStaffDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(codingsubmissionstaffdata.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CodingSubmissionStaffData.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CodingSubmissionStaffDataUpsertBulk) Ignore() *CodingSubmissionStaffDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingSubmissionStaffDataUpsertBulk) DoNothing() *CodingSubmissionStaffDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingSubmissionStaffDataCreateBulk.OnConflict
// documentation for more info.
func (u *CodingSubmissionStaffDataUpsertBulk) Update(set func(*CodingSubmissionStaffDataUpsert)) *CodingSubmissionStaffDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingSubmissionStaffDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *CodingSubmissionStaffDataUpsertBulk) SetCreateTime(v time.Time) *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertBulk) UpdateCreateTime() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingSubmissionStaffDataUpsertBulk) SetUpdateTime(v time.Time) *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertBulk) UpdateUpdateTime() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetExecutionID sets the "execution_id" field.
func (u *CodingSubmissionStaffDataUpsertBulk) SetExecutionID(v int64) *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetExecutionID(v)
	})
}

// AddExecutionID adds v to the "execution_id" field.
func (u *CodingSubmissionStaffDataUpsertBulk) AddExecutionID(v int64) *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.AddExecutionID(v)
	})
}

// UpdateExecutionID sets the "execution_id" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertBulk) UpdateExecutionID() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateExecutionID()
	})
}

// ClearExecutionID clears the value of the "execution_id" field.
func (u *CodingSubmissionStaffDataUpsertBulk) ClearExecutionID() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.ClearExecutionID()
	})
}

// SetInput sets the "input" field.
func (u *CodingSubmissionStaffDataUpsertBulk) SetInput(v string) *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetInput(v)
	})
}

// UpdateInput sets the "input" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertBulk) UpdateInput() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateInput()
	})
}

// SetOutput sets the "output" field.
func (u *CodingSubmissionStaffDataUpsertBulk) SetOutput(v string) *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetOutput(v)
	})
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertBulk) UpdateOutput() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateOutput()
	})
}

// ClearOutput clears the value of the "output" field.
func (u *CodingSubmissionStaffDataUpsertBulk) ClearOutput() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.ClearOutput()
	})
}

// SetStderr sets the "stderr" field.
func (u *CodingSubmissionStaffDataUpsertBulk) SetStderr(v string) *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetStderr(v)
	})
}

// UpdateStderr sets the "stderr" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertBulk) UpdateStderr() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateStderr()
	})
}

// ClearStderr clears the value of the "stderr" field.
func (u *CodingSubmissionStaffDataUpsertBulk) ClearStderr() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.ClearStderr()
	})
}

// SetExitError sets the "exit_error" field.
func (u *CodingSubmissionStaffDataUpsertBulk) SetExitError(v string) *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.SetExitError(v)
	})
}

// UpdateExitError sets the "exit_error" field to the value that was provided on create.
func (u *CodingSubmissionStaffDataUpsertBulk) UpdateExitError() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.UpdateExitError()
	})
}

// ClearExitError clears the value of the "exit_error" field.
func (u *CodingSubmissionStaffDataUpsertBulk) ClearExitError() *CodingSubmissionStaffDataUpsertBulk {
	return u.Update(func(s *CodingSubmissionStaffDataUpsert) {
		s.ClearExitError()
	})
}

// Exec executes the query.
func (u *CodingSubmissionStaffDataUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CodingSubmissionStaffDataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingSubmissionStaffDataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingSubmissionStaffDataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
