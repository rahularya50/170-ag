// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingsubmission"
	"170-ag/ent/generated/codingsubmissionstaffdata"
	"170-ag/ent/generated/predicate"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingSubmissionStaffDataQuery is the builder for querying CodingSubmissionStaffData entities.
type CodingSubmissionStaffDataQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CodingSubmissionStaffData
	// eager-loading edges.
	withCodingSubmission *CodingSubmissionQuery
	modifiers            []func(s *sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CodingSubmissionStaffDataQuery builder.
func (cssdq *CodingSubmissionStaffDataQuery) Where(ps ...predicate.CodingSubmissionStaffData) *CodingSubmissionStaffDataQuery {
	cssdq.predicates = append(cssdq.predicates, ps...)
	return cssdq
}

// Limit adds a limit step to the query.
func (cssdq *CodingSubmissionStaffDataQuery) Limit(limit int) *CodingSubmissionStaffDataQuery {
	cssdq.limit = &limit
	return cssdq
}

// Offset adds an offset step to the query.
func (cssdq *CodingSubmissionStaffDataQuery) Offset(offset int) *CodingSubmissionStaffDataQuery {
	cssdq.offset = &offset
	return cssdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cssdq *CodingSubmissionStaffDataQuery) Unique(unique bool) *CodingSubmissionStaffDataQuery {
	cssdq.unique = &unique
	return cssdq
}

// Order adds an order step to the query.
func (cssdq *CodingSubmissionStaffDataQuery) Order(o ...OrderFunc) *CodingSubmissionStaffDataQuery {
	cssdq.order = append(cssdq.order, o...)
	return cssdq
}

// QueryCodingSubmission chains the current query on the "coding_submission" edge.
func (cssdq *CodingSubmissionStaffDataQuery) QueryCodingSubmission() *CodingSubmissionQuery {
	query := &CodingSubmissionQuery{config: cssdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cssdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cssdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(codingsubmissionstaffdata.Table, codingsubmissionstaffdata.FieldID, selector),
			sqlgraph.To(codingsubmission.Table, codingsubmission.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, codingsubmissionstaffdata.CodingSubmissionTable, codingsubmissionstaffdata.CodingSubmissionColumn),
		)
		fromU = sqlgraph.SetNeighbors(cssdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CodingSubmissionStaffData entity from the query.
// Returns a *NotFoundError when no CodingSubmissionStaffData was found.
func (cssdq *CodingSubmissionStaffDataQuery) First(ctx context.Context) (*CodingSubmissionStaffData, error) {
	nodes, err := cssdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{codingsubmissionstaffdata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cssdq *CodingSubmissionStaffDataQuery) FirstX(ctx context.Context) *CodingSubmissionStaffData {
	node, err := cssdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CodingSubmissionStaffData ID from the query.
// Returns a *NotFoundError when no CodingSubmissionStaffData ID was found.
func (cssdq *CodingSubmissionStaffDataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cssdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{codingsubmissionstaffdata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cssdq *CodingSubmissionStaffDataQuery) FirstIDX(ctx context.Context) int {
	id, err := cssdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CodingSubmissionStaffData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one CodingSubmissionStaffData entity is not found.
// Returns a *NotFoundError when no CodingSubmissionStaffData entities are found.
func (cssdq *CodingSubmissionStaffDataQuery) Only(ctx context.Context) (*CodingSubmissionStaffData, error) {
	nodes, err := cssdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		return nil, &NotSingularError{codingsubmissionstaffdata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cssdq *CodingSubmissionStaffDataQuery) OnlyX(ctx context.Context) *CodingSubmissionStaffData {
	node, err := cssdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CodingSubmissionStaffData ID in the query.
// Returns a *NotSingularError when exactly one CodingSubmissionStaffData ID is not found.
// Returns a *NotFoundError when no entities are found.
func (cssdq *CodingSubmissionStaffDataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cssdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		err = &NotSingularError{codingsubmissionstaffdata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cssdq *CodingSubmissionStaffDataQuery) OnlyIDX(ctx context.Context) int {
	id, err := cssdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CodingSubmissionStaffDataSlice.
func (cssdq *CodingSubmissionStaffDataQuery) All(ctx context.Context) ([]*CodingSubmissionStaffData, error) {
	if err := cssdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cssdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cssdq *CodingSubmissionStaffDataQuery) AllX(ctx context.Context) []*CodingSubmissionStaffData {
	nodes, err := cssdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CodingSubmissionStaffData IDs.
func (cssdq *CodingSubmissionStaffDataQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := cssdq.Select(codingsubmissionstaffdata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cssdq *CodingSubmissionStaffDataQuery) IDsX(ctx context.Context) []int {
	ids, err := cssdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cssdq *CodingSubmissionStaffDataQuery) Count(ctx context.Context) (int, error) {
	if err := cssdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cssdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cssdq *CodingSubmissionStaffDataQuery) CountX(ctx context.Context) int {
	count, err := cssdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cssdq *CodingSubmissionStaffDataQuery) Exist(ctx context.Context) (bool, error) {
	if err := cssdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cssdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cssdq *CodingSubmissionStaffDataQuery) ExistX(ctx context.Context) bool {
	exist, err := cssdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CodingSubmissionStaffDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cssdq *CodingSubmissionStaffDataQuery) Clone() *CodingSubmissionStaffDataQuery {
	if cssdq == nil {
		return nil
	}
	return &CodingSubmissionStaffDataQuery{
		config:               cssdq.config,
		limit:                cssdq.limit,
		offset:               cssdq.offset,
		order:                append([]OrderFunc{}, cssdq.order...),
		predicates:           append([]predicate.CodingSubmissionStaffData{}, cssdq.predicates...),
		withCodingSubmission: cssdq.withCodingSubmission.Clone(),
		// clone intermediate query.
		sql:  cssdq.sql.Clone(),
		path: cssdq.path,
	}
}

// WithCodingSubmission tells the query-builder to eager-load the nodes that are connected to
// the "coding_submission" edge. The optional arguments are used to configure the query builder of the edge.
func (cssdq *CodingSubmissionStaffDataQuery) WithCodingSubmission(opts ...func(*CodingSubmissionQuery)) *CodingSubmissionStaffDataQuery {
	query := &CodingSubmissionQuery{config: cssdq.config}
	for _, opt := range opts {
		opt(query)
	}
	cssdq.withCodingSubmission = query
	return cssdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CodingSubmissionStaffData.Query().
//		GroupBy(codingsubmissionstaffdata.FieldCreateTime).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
//
func (cssdq *CodingSubmissionStaffDataQuery) GroupBy(field string, fields ...string) *CodingSubmissionStaffDataGroupBy {
	group := &CodingSubmissionStaffDataGroupBy{config: cssdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cssdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cssdq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.CodingSubmissionStaffData.Query().
//		Select(codingsubmissionstaffdata.FieldCreateTime).
//		Scan(ctx, &v)
//
func (cssdq *CodingSubmissionStaffDataQuery) Select(fields ...string) *CodingSubmissionStaffDataSelect {
	cssdq.fields = append(cssdq.fields, fields...)
	return &CodingSubmissionStaffDataSelect{CodingSubmissionStaffDataQuery: cssdq}
}

func (cssdq *CodingSubmissionStaffDataQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cssdq.fields {
		if !codingsubmissionstaffdata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if cssdq.path != nil {
		prev, err := cssdq.path(ctx)
		if err != nil {
			return err
		}
		cssdq.sql = prev
	}
	if codingsubmissionstaffdata.Policy == nil {
		return errors.New("generated: uninitialized codingsubmissionstaffdata.Policy (forgotten import generated/runtime?)")
	}
	if err := codingsubmissionstaffdata.Policy.EvalQuery(ctx, cssdq); err != nil {
		return err
	}
	return nil
}

func (cssdq *CodingSubmissionStaffDataQuery) sqlAll(ctx context.Context) ([]*CodingSubmissionStaffData, error) {
	var (
		nodes       = []*CodingSubmissionStaffData{}
		_spec       = cssdq.querySpec()
		loadedTypes = [1]bool{
			cssdq.withCodingSubmission != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &CodingSubmissionStaffData{config: cssdq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("generated: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cssdq.modifiers) > 0 {
		_spec.Modifiers = cssdq.modifiers
	}
	if err := sqlgraph.QueryNodes(ctx, cssdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := cssdq.withCodingSubmission; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*CodingSubmissionStaffData)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.CodingSubmission(func(s *sql.Selector) {
			s.Where(sql.InValues(codingsubmissionstaffdata.CodingSubmissionColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.coding_submission_staff_data_coding_submission
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "coding_submission_staff_data_coding_submission" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "coding_submission_staff_data_coding_submission" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.CodingSubmission = n
		}
	}

	return nodes, nil
}

func (cssdq *CodingSubmissionStaffDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cssdq.querySpec()
	if len(cssdq.modifiers) > 0 {
		_spec.Modifiers = cssdq.modifiers
	}
	_spec.Node.Columns = cssdq.fields
	if len(cssdq.fields) > 0 {
		_spec.Unique = cssdq.unique != nil && *cssdq.unique
	}
	return sqlgraph.CountNodes(ctx, cssdq.driver, _spec)
}

func (cssdq *CodingSubmissionStaffDataQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cssdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("generated: check existence: %w", err)
	}
	return n > 0, nil
}

func (cssdq *CodingSubmissionStaffDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingsubmissionstaffdata.Table,
			Columns: codingsubmissionstaffdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingsubmissionstaffdata.FieldID,
			},
		},
		From:   cssdq.sql,
		Unique: true,
	}
	if unique := cssdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cssdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codingsubmissionstaffdata.FieldID)
		for i := range fields {
			if fields[i] != codingsubmissionstaffdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cssdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cssdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cssdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cssdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cssdq *CodingSubmissionStaffDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cssdq.driver.Dialect())
	t1 := builder.Table(codingsubmissionstaffdata.Table)
	columns := cssdq.fields
	if len(columns) == 0 {
		columns = codingsubmissionstaffdata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cssdq.sql != nil {
		selector = cssdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cssdq.unique != nil && *cssdq.unique {
		selector.Distinct()
	}
	for _, m := range cssdq.modifiers {
		m(selector)
	}
	for _, p := range cssdq.predicates {
		p(selector)
	}
	for _, p := range cssdq.order {
		p(selector)
	}
	if offset := cssdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cssdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cssdq *CodingSubmissionStaffDataQuery) Modify(modifiers ...func(s *sql.Selector)) *CodingSubmissionStaffDataSelect {
	cssdq.modifiers = append(cssdq.modifiers, modifiers...)
	return cssdq.Select()
}

// CodingSubmissionStaffDataGroupBy is the group-by builder for CodingSubmissionStaffData entities.
type CodingSubmissionStaffDataGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Aggregate(fns ...AggregateFunc) *CodingSubmissionStaffDataGroupBy {
	cssdgb.fns = append(cssdgb.fns, fns...)
	return cssdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cssdgb.path(ctx)
	if err != nil {
		return err
	}
	cssdgb.sql = query
	return cssdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cssdgb *CodingSubmissionStaffDataGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cssdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cssdgb.fields) > 1 {
		return nil, errors.New("generated: CodingSubmissionStaffDataGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cssdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cssdgb *CodingSubmissionStaffDataGroupBy) StringsX(ctx context.Context) []string {
	v, err := cssdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cssdgb *CodingSubmissionStaffDataGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cssdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		err = fmt.Errorf("generated: CodingSubmissionStaffDataGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cssdgb *CodingSubmissionStaffDataGroupBy) StringX(ctx context.Context) string {
	v, err := cssdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cssdgb.fields) > 1 {
		return nil, errors.New("generated: CodingSubmissionStaffDataGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cssdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cssdgb *CodingSubmissionStaffDataGroupBy) IntsX(ctx context.Context) []int {
	v, err := cssdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cssdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		err = fmt.Errorf("generated: CodingSubmissionStaffDataGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cssdgb *CodingSubmissionStaffDataGroupBy) IntX(ctx context.Context) int {
	v, err := cssdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cssdgb.fields) > 1 {
		return nil, errors.New("generated: CodingSubmissionStaffDataGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cssdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cssdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cssdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		err = fmt.Errorf("generated: CodingSubmissionStaffDataGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cssdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cssdgb.fields) > 1 {
		return nil, errors.New("generated: CodingSubmissionStaffDataGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cssdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cssdgb *CodingSubmissionStaffDataGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cssdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cssdgb *CodingSubmissionStaffDataGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cssdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		err = fmt.Errorf("generated: CodingSubmissionStaffDataGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cssdgb *CodingSubmissionStaffDataGroupBy) BoolX(ctx context.Context) bool {
	v, err := cssdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cssdgb *CodingSubmissionStaffDataGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cssdgb.fields {
		if !codingsubmissionstaffdata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cssdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cssdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cssdgb *CodingSubmissionStaffDataGroupBy) sqlQuery() *sql.Selector {
	selector := cssdgb.sql.Select()
	aggregation := make([]string, 0, len(cssdgb.fns))
	for _, fn := range cssdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cssdgb.fields)+len(cssdgb.fns))
		for _, f := range cssdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cssdgb.fields...)...)
}

// CodingSubmissionStaffDataSelect is the builder for selecting fields of CodingSubmissionStaffData entities.
type CodingSubmissionStaffDataSelect struct {
	*CodingSubmissionStaffDataQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cssds *CodingSubmissionStaffDataSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cssds.prepareQuery(ctx); err != nil {
		return err
	}
	cssds.sql = cssds.CodingSubmissionStaffDataQuery.sqlQuery(ctx)
	return cssds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cssds *CodingSubmissionStaffDataSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cssds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (cssds *CodingSubmissionStaffDataSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cssds.fields) > 1 {
		return nil, errors.New("generated: CodingSubmissionStaffDataSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cssds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cssds *CodingSubmissionStaffDataSelect) StringsX(ctx context.Context) []string {
	v, err := cssds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (cssds *CodingSubmissionStaffDataSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cssds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		err = fmt.Errorf("generated: CodingSubmissionStaffDataSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cssds *CodingSubmissionStaffDataSelect) StringX(ctx context.Context) string {
	v, err := cssds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (cssds *CodingSubmissionStaffDataSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cssds.fields) > 1 {
		return nil, errors.New("generated: CodingSubmissionStaffDataSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cssds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cssds *CodingSubmissionStaffDataSelect) IntsX(ctx context.Context) []int {
	v, err := cssds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (cssds *CodingSubmissionStaffDataSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cssds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		err = fmt.Errorf("generated: CodingSubmissionStaffDataSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cssds *CodingSubmissionStaffDataSelect) IntX(ctx context.Context) int {
	v, err := cssds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (cssds *CodingSubmissionStaffDataSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cssds.fields) > 1 {
		return nil, errors.New("generated: CodingSubmissionStaffDataSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cssds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cssds *CodingSubmissionStaffDataSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cssds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (cssds *CodingSubmissionStaffDataSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cssds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		err = fmt.Errorf("generated: CodingSubmissionStaffDataSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cssds *CodingSubmissionStaffDataSelect) Float64X(ctx context.Context) float64 {
	v, err := cssds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (cssds *CodingSubmissionStaffDataSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cssds.fields) > 1 {
		return nil, errors.New("generated: CodingSubmissionStaffDataSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cssds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cssds *CodingSubmissionStaffDataSelect) BoolsX(ctx context.Context) []bool {
	v, err := cssds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (cssds *CodingSubmissionStaffDataSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cssds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingsubmissionstaffdata.Label}
	default:
		err = fmt.Errorf("generated: CodingSubmissionStaffDataSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cssds *CodingSubmissionStaffDataSelect) BoolX(ctx context.Context) bool {
	v, err := cssds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cssds *CodingSubmissionStaffDataSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cssds.sql.Query()
	if err := cssds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cssds *CodingSubmissionStaffDataSelect) Modify(modifiers ...func(s *sql.Selector)) *CodingSubmissionStaffDataSelect {
	cssds.modifiers = append(cssds.modifiers, modifiers...)
	return cssds
}
