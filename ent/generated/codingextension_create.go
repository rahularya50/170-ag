// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingextension"
	"170-ag/ent/generated/codingproblem"
	"170-ag/ent/generated/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingExtensionCreate is the builder for creating a CodingExtension entity.
type CodingExtensionCreate struct {
	config
	mutation *CodingExtensionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cec *CodingExtensionCreate) SetCreateTime(t time.Time) *CodingExtensionCreate {
	cec.mutation.SetCreateTime(t)
	return cec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cec *CodingExtensionCreate) SetNillableCreateTime(t *time.Time) *CodingExtensionCreate {
	if t != nil {
		cec.SetCreateTime(*t)
	}
	return cec
}

// SetUpdateTime sets the "update_time" field.
func (cec *CodingExtensionCreate) SetUpdateTime(t time.Time) *CodingExtensionCreate {
	cec.mutation.SetUpdateTime(t)
	return cec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cec *CodingExtensionCreate) SetNillableUpdateTime(t *time.Time) *CodingExtensionCreate {
	if t != nil {
		cec.SetUpdateTime(*t)
	}
	return cec
}

// SetDeadline sets the "deadline" field.
func (cec *CodingExtensionCreate) SetDeadline(t time.Time) *CodingExtensionCreate {
	cec.mutation.SetDeadline(t)
	return cec
}

// SetStudentID sets the "student" edge to the User entity by ID.
func (cec *CodingExtensionCreate) SetStudentID(id int) *CodingExtensionCreate {
	cec.mutation.SetStudentID(id)
	return cec
}

// SetStudent sets the "student" edge to the User entity.
func (cec *CodingExtensionCreate) SetStudent(u *User) *CodingExtensionCreate {
	return cec.SetStudentID(u.ID)
}

// SetCodingProblemID sets the "coding_problem" edge to the CodingProblem entity by ID.
func (cec *CodingExtensionCreate) SetCodingProblemID(id int) *CodingExtensionCreate {
	cec.mutation.SetCodingProblemID(id)
	return cec
}

// SetCodingProblem sets the "coding_problem" edge to the CodingProblem entity.
func (cec *CodingExtensionCreate) SetCodingProblem(c *CodingProblem) *CodingExtensionCreate {
	return cec.SetCodingProblemID(c.ID)
}

// Mutation returns the CodingExtensionMutation object of the builder.
func (cec *CodingExtensionCreate) Mutation() *CodingExtensionMutation {
	return cec.mutation
}

// Save creates the CodingExtension in the database.
func (cec *CodingExtensionCreate) Save(ctx context.Context) (*CodingExtension, error) {
	var (
		err  error
		node *CodingExtension
	)
	if err := cec.defaults(); err != nil {
		return nil, err
	}
	if len(cec.hooks) == 0 {
		if err = cec.check(); err != nil {
			return nil, err
		}
		node, err = cec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingExtensionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cec.check(); err != nil {
				return nil, err
			}
			cec.mutation = mutation
			if node, err = cec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cec.hooks) - 1; i >= 0; i-- {
			if cec.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cec *CodingExtensionCreate) SaveX(ctx context.Context) *CodingExtension {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cec *CodingExtensionCreate) Exec(ctx context.Context) error {
	_, err := cec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cec *CodingExtensionCreate) ExecX(ctx context.Context) {
	if err := cec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cec *CodingExtensionCreate) defaults() error {
	if _, ok := cec.mutation.CreateTime(); !ok {
		if codingextension.DefaultCreateTime == nil {
			return fmt.Errorf("generated: uninitialized codingextension.DefaultCreateTime (forgotten import generated/runtime?)")
		}
		v := codingextension.DefaultCreateTime()
		cec.mutation.SetCreateTime(v)
	}
	if _, ok := cec.mutation.UpdateTime(); !ok {
		if codingextension.DefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingextension.DefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingextension.DefaultUpdateTime()
		cec.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cec *CodingExtensionCreate) check() error {
	if _, ok := cec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "CodingExtension.create_time"`)}
	}
	if _, ok := cec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "CodingExtension.update_time"`)}
	}
	if _, ok := cec.mutation.Deadline(); !ok {
		return &ValidationError{Name: "deadline", err: errors.New(`generated: missing required field "CodingExtension.deadline"`)}
	}
	if _, ok := cec.mutation.StudentID(); !ok {
		return &ValidationError{Name: "student", err: errors.New(`generated: missing required edge "CodingExtension.student"`)}
	}
	if _, ok := cec.mutation.CodingProblemID(); !ok {
		return &ValidationError{Name: "coding_problem", err: errors.New(`generated: missing required edge "CodingExtension.coding_problem"`)}
	}
	return nil
}

func (cec *CodingExtensionCreate) sqlSave(ctx context.Context) (*CodingExtension, error) {
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cec *CodingExtensionCreate) createSpec() (*CodingExtension, *sqlgraph.CreateSpec) {
	var (
		_node = &CodingExtension{config: cec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: codingextension.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingextension.FieldID,
			},
		}
	)
	_spec.OnConflict = cec.conflict
	if value, ok := cec.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingextension.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cec.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingextension.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cec.mutation.Deadline(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingextension.FieldDeadline,
		})
		_node.Deadline = value
	}
	if nodes := cec.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.StudentTable,
			Columns: []string{codingextension.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coding_extension_student = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cec.mutation.CodingProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.CodingProblemTable,
			Columns: []string{codingextension.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coding_extension_coding_problem = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingExtension.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingExtensionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (cec *CodingExtensionCreate) OnConflict(opts ...sql.ConflictOption) *CodingExtensionUpsertOne {
	cec.conflict = opts
	return &CodingExtensionUpsertOne{
		create: cec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingExtension.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cec *CodingExtensionCreate) OnConflictColumns(columns ...string) *CodingExtensionUpsertOne {
	cec.conflict = append(cec.conflict, sql.ConflictColumns(columns...))
	return &CodingExtensionUpsertOne{
		create: cec,
	}
}

type (
	// CodingExtensionUpsertOne is the builder for "upsert"-ing
	//  one CodingExtension node.
	CodingExtensionUpsertOne struct {
		create *CodingExtensionCreate
	}

	// CodingExtensionUpsert is the "OnConflict" setter.
	CodingExtensionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *CodingExtensionUpsert) SetCreateTime(v time.Time) *CodingExtensionUpsert {
	u.Set(codingextension.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingExtensionUpsert) UpdateCreateTime() *CodingExtensionUpsert {
	u.SetExcluded(codingextension.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingExtensionUpsert) SetUpdateTime(v time.Time) *CodingExtensionUpsert {
	u.Set(codingextension.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingExtensionUpsert) UpdateUpdateTime() *CodingExtensionUpsert {
	u.SetExcluded(codingextension.FieldUpdateTime)
	return u
}

// SetDeadline sets the "deadline" field.
func (u *CodingExtensionUpsert) SetDeadline(v time.Time) *CodingExtensionUpsert {
	u.Set(codingextension.FieldDeadline, v)
	return u
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *CodingExtensionUpsert) UpdateDeadline() *CodingExtensionUpsert {
	u.SetExcluded(codingextension.FieldDeadline)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CodingExtension.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingExtensionUpsertOne) UpdateNewValues() *CodingExtensionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(codingextension.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CodingExtension.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CodingExtensionUpsertOne) Ignore() *CodingExtensionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingExtensionUpsertOne) DoNothing() *CodingExtensionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingExtensionCreate.OnConflict
// documentation for more info.
func (u *CodingExtensionUpsertOne) Update(set func(*CodingExtensionUpsert)) *CodingExtensionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingExtensionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *CodingExtensionUpsertOne) SetCreateTime(v time.Time) *CodingExtensionUpsertOne {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingExtensionUpsertOne) UpdateCreateTime() *CodingExtensionUpsertOne {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingExtensionUpsertOne) SetUpdateTime(v time.Time) *CodingExtensionUpsertOne {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingExtensionUpsertOne) UpdateUpdateTime() *CodingExtensionUpsertOne {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDeadline sets the "deadline" field.
func (u *CodingExtensionUpsertOne) SetDeadline(v time.Time) *CodingExtensionUpsertOne {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.SetDeadline(v)
	})
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *CodingExtensionUpsertOne) UpdateDeadline() *CodingExtensionUpsertOne {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.UpdateDeadline()
	})
}

// Exec executes the query.
func (u *CodingExtensionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingExtensionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingExtensionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CodingExtensionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CodingExtensionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CodingExtensionCreateBulk is the builder for creating many CodingExtension entities in bulk.
type CodingExtensionCreateBulk struct {
	config
	builders []*CodingExtensionCreate
	conflict []sql.ConflictOption
}

// Save creates the CodingExtension entities in the database.
func (cecb *CodingExtensionCreateBulk) Save(ctx context.Context) ([]*CodingExtension, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*CodingExtension, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodingExtensionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *CodingExtensionCreateBulk) SaveX(ctx context.Context) []*CodingExtension {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecb *CodingExtensionCreateBulk) Exec(ctx context.Context) error {
	_, err := cecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecb *CodingExtensionCreateBulk) ExecX(ctx context.Context) {
	if err := cecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingExtension.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingExtensionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (cecb *CodingExtensionCreateBulk) OnConflict(opts ...sql.ConflictOption) *CodingExtensionUpsertBulk {
	cecb.conflict = opts
	return &CodingExtensionUpsertBulk{
		create: cecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingExtension.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cecb *CodingExtensionCreateBulk) OnConflictColumns(columns ...string) *CodingExtensionUpsertBulk {
	cecb.conflict = append(cecb.conflict, sql.ConflictColumns(columns...))
	return &CodingExtensionUpsertBulk{
		create: cecb,
	}
}

// CodingExtensionUpsertBulk is the builder for "upsert"-ing
// a bulk of CodingExtension nodes.
type CodingExtensionUpsertBulk struct {
	create *CodingExtensionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CodingExtension.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingExtensionUpsertBulk) UpdateNewValues() *CodingExtensionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(codingextension.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CodingExtension.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CodingExtensionUpsertBulk) Ignore() *CodingExtensionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingExtensionUpsertBulk) DoNothing() *CodingExtensionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingExtensionCreateBulk.OnConflict
// documentation for more info.
func (u *CodingExtensionUpsertBulk) Update(set func(*CodingExtensionUpsert)) *CodingExtensionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingExtensionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *CodingExtensionUpsertBulk) SetCreateTime(v time.Time) *CodingExtensionUpsertBulk {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingExtensionUpsertBulk) UpdateCreateTime() *CodingExtensionUpsertBulk {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingExtensionUpsertBulk) SetUpdateTime(v time.Time) *CodingExtensionUpsertBulk {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingExtensionUpsertBulk) UpdateUpdateTime() *CodingExtensionUpsertBulk {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDeadline sets the "deadline" field.
func (u *CodingExtensionUpsertBulk) SetDeadline(v time.Time) *CodingExtensionUpsertBulk {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.SetDeadline(v)
	})
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *CodingExtensionUpsertBulk) UpdateDeadline() *CodingExtensionUpsertBulk {
	return u.Update(func(s *CodingExtensionUpsert) {
		s.UpdateDeadline()
	})
}

// Exec executes the query.
func (u *CodingExtensionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CodingExtensionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingExtensionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingExtensionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
