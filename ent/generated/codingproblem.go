// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingproblem"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CodingProblem is the model entity for the CodingProblem schema.
type CodingProblem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Statement holds the value of the "statement" field.
	Statement string `json:"statement,omitempty"`
	// Skeleton holds the value of the "skeleton" field.
	Skeleton string `json:"skeleton,omitempty"`
	// Released holds the value of the "released" field.
	Released bool `json:"released,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CodingProblemQuery when eager-loading is set.
	Edges CodingProblemEdges `json:"edges"`
}

// CodingProblemEdges holds the relations/edges for other nodes in the graph.
type CodingProblemEdges struct {
	// Drafts holds the value of the drafts edge.
	Drafts []*CodingDraft `json:"drafts,omitempty"`
	// TestCases holds the value of the test_cases edge.
	TestCases []*CodingTestCase `json:"test_cases,omitempty"`
	// Submissions holds the value of the submissions edge.
	Submissions []*CodingSubmission `json:"submissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DraftsOrErr returns the Drafts value or an error if the edge
// was not loaded in eager-loading.
func (e CodingProblemEdges) DraftsOrErr() ([]*CodingDraft, error) {
	if e.loadedTypes[0] {
		return e.Drafts, nil
	}
	return nil, &NotLoadedError{edge: "drafts"}
}

// TestCasesOrErr returns the TestCases value or an error if the edge
// was not loaded in eager-loading.
func (e CodingProblemEdges) TestCasesOrErr() ([]*CodingTestCase, error) {
	if e.loadedTypes[1] {
		return e.TestCases, nil
	}
	return nil, &NotLoadedError{edge: "test_cases"}
}

// SubmissionsOrErr returns the Submissions value or an error if the edge
// was not loaded in eager-loading.
func (e CodingProblemEdges) SubmissionsOrErr() ([]*CodingSubmission, error) {
	if e.loadedTypes[2] {
		return e.Submissions, nil
	}
	return nil, &NotLoadedError{edge: "submissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CodingProblem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case codingproblem.FieldReleased:
			values[i] = new(sql.NullBool)
		case codingproblem.FieldID:
			values[i] = new(sql.NullInt64)
		case codingproblem.FieldName, codingproblem.FieldStatement, codingproblem.FieldSkeleton:
			values[i] = new(sql.NullString)
		case codingproblem.FieldCreateTime, codingproblem.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CodingProblem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CodingProblem fields.
func (cp *CodingProblem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case codingproblem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case codingproblem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cp.CreateTime = value.Time
			}
		case codingproblem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cp.UpdateTime = value.Time
			}
		case codingproblem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cp.Name = value.String
			}
		case codingproblem.FieldStatement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field statement", values[i])
			} else if value.Valid {
				cp.Statement = value.String
			}
		case codingproblem.FieldSkeleton:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field skeleton", values[i])
			} else if value.Valid {
				cp.Skeleton = value.String
			}
		case codingproblem.FieldReleased:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field released", values[i])
			} else if value.Valid {
				cp.Released = value.Bool
			}
		}
	}
	return nil
}

// QueryDrafts queries the "drafts" edge of the CodingProblem entity.
func (cp *CodingProblem) QueryDrafts() *CodingDraftQuery {
	return (&CodingProblemClient{config: cp.config}).QueryDrafts(cp)
}

// QueryTestCases queries the "test_cases" edge of the CodingProblem entity.
func (cp *CodingProblem) QueryTestCases() *CodingTestCaseQuery {
	return (&CodingProblemClient{config: cp.config}).QueryTestCases(cp)
}

// QuerySubmissions queries the "submissions" edge of the CodingProblem entity.
func (cp *CodingProblem) QuerySubmissions() *CodingSubmissionQuery {
	return (&CodingProblemClient{config: cp.config}).QuerySubmissions(cp)
}

// Update returns a builder for updating this CodingProblem.
// Note that you need to call CodingProblem.Unwrap() before calling this method if this CodingProblem
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CodingProblem) Update() *CodingProblemUpdateOne {
	return (&CodingProblemClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the CodingProblem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CodingProblem) Unwrap() *CodingProblem {
	tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("generated: CodingProblem is not a transactional entity")
	}
	cp.config.driver = tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CodingProblem) String() string {
	var builder strings.Builder
	builder.WriteString("CodingProblem(")
	builder.WriteString(fmt.Sprintf("id=%v", cp.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(cp.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(cp.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(cp.Name)
	builder.WriteString(", statement=")
	builder.WriteString(cp.Statement)
	builder.WriteString(", skeleton=")
	builder.WriteString(cp.Skeleton)
	builder.WriteString(", released=")
	builder.WriteString(fmt.Sprintf("%v", cp.Released))
	builder.WriteByte(')')
	return builder.String()
}

// CodingProblems is a parsable slice of CodingProblem.
type CodingProblems []*CodingProblem

func (cp CodingProblems) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
