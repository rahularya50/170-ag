// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingdraft"
	"170-ag/ent/generated/codingproblem"
	"170-ag/ent/generated/predicate"
	"170-ag/ent/generated/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingDraftUpdate is the builder for updating CodingDraft entities.
type CodingDraftUpdate struct {
	config
	hooks    []Hook
	mutation *CodingDraftMutation
}

// Where appends a list predicates to the CodingDraftUpdate builder.
func (cdu *CodingDraftUpdate) Where(ps ...predicate.CodingDraft) *CodingDraftUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetUpdateTime sets the "update_time" field.
func (cdu *CodingDraftUpdate) SetUpdateTime(t time.Time) *CodingDraftUpdate {
	cdu.mutation.SetUpdateTime(t)
	return cdu
}

// SetCode sets the "code" field.
func (cdu *CodingDraftUpdate) SetCode(s string) *CodingDraftUpdate {
	cdu.mutation.SetCode(s)
	return cdu
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (cdu *CodingDraftUpdate) SetAuthorID(id int) *CodingDraftUpdate {
	cdu.mutation.SetAuthorID(id)
	return cdu
}

// SetAuthor sets the "author" edge to the User entity.
func (cdu *CodingDraftUpdate) SetAuthor(u *User) *CodingDraftUpdate {
	return cdu.SetAuthorID(u.ID)
}

// SetCodingProblemID sets the "coding_problem" edge to the CodingProblem entity by ID.
func (cdu *CodingDraftUpdate) SetCodingProblemID(id int) *CodingDraftUpdate {
	cdu.mutation.SetCodingProblemID(id)
	return cdu
}

// SetCodingProblem sets the "coding_problem" edge to the CodingProblem entity.
func (cdu *CodingDraftUpdate) SetCodingProblem(c *CodingProblem) *CodingDraftUpdate {
	return cdu.SetCodingProblemID(c.ID)
}

// Mutation returns the CodingDraftMutation object of the builder.
func (cdu *CodingDraftUpdate) Mutation() *CodingDraftMutation {
	return cdu.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (cdu *CodingDraftUpdate) ClearAuthor() *CodingDraftUpdate {
	cdu.mutation.ClearAuthor()
	return cdu
}

// ClearCodingProblem clears the "coding_problem" edge to the CodingProblem entity.
func (cdu *CodingDraftUpdate) ClearCodingProblem() *CodingDraftUpdate {
	cdu.mutation.ClearCodingProblem()
	return cdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *CodingDraftUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cdu.defaults(); err != nil {
		return 0, err
	}
	if len(cdu.hooks) == 0 {
		if err = cdu.check(); err != nil {
			return 0, err
		}
		affected, err = cdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingDraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cdu.check(); err != nil {
				return 0, err
			}
			cdu.mutation = mutation
			affected, err = cdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cdu.hooks) - 1; i >= 0; i-- {
			if cdu.hooks[i] == nil {
				return 0, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *CodingDraftUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *CodingDraftUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *CodingDraftUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdu *CodingDraftUpdate) defaults() error {
	if _, ok := cdu.mutation.UpdateTime(); !ok {
		if codingdraft.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingdraft.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingdraft.UpdateDefaultUpdateTime()
		cdu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cdu *CodingDraftUpdate) check() error {
	if _, ok := cdu.mutation.AuthorID(); cdu.mutation.AuthorCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingDraft.author"`)
	}
	if _, ok := cdu.mutation.CodingProblemID(); cdu.mutation.CodingProblemCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingDraft.coding_problem"`)
	}
	return nil
}

func (cdu *CodingDraftUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingdraft.Table,
			Columns: codingdraft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingdraft.FieldID,
			},
		},
	}
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingdraft.FieldUpdateTime,
		})
	}
	if value, ok := cdu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingdraft.FieldCode,
		})
	}
	if cdu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.AuthorTable,
			Columns: []string{codingdraft.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.AuthorTable,
			Columns: []string{codingdraft.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdu.mutation.CodingProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.CodingProblemTable,
			Columns: []string{codingdraft.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.CodingProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.CodingProblemTable,
			Columns: []string{codingdraft.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingdraft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CodingDraftUpdateOne is the builder for updating a single CodingDraft entity.
type CodingDraftUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodingDraftMutation
}

// SetUpdateTime sets the "update_time" field.
func (cduo *CodingDraftUpdateOne) SetUpdateTime(t time.Time) *CodingDraftUpdateOne {
	cduo.mutation.SetUpdateTime(t)
	return cduo
}

// SetCode sets the "code" field.
func (cduo *CodingDraftUpdateOne) SetCode(s string) *CodingDraftUpdateOne {
	cduo.mutation.SetCode(s)
	return cduo
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (cduo *CodingDraftUpdateOne) SetAuthorID(id int) *CodingDraftUpdateOne {
	cduo.mutation.SetAuthorID(id)
	return cduo
}

// SetAuthor sets the "author" edge to the User entity.
func (cduo *CodingDraftUpdateOne) SetAuthor(u *User) *CodingDraftUpdateOne {
	return cduo.SetAuthorID(u.ID)
}

// SetCodingProblemID sets the "coding_problem" edge to the CodingProblem entity by ID.
func (cduo *CodingDraftUpdateOne) SetCodingProblemID(id int) *CodingDraftUpdateOne {
	cduo.mutation.SetCodingProblemID(id)
	return cduo
}

// SetCodingProblem sets the "coding_problem" edge to the CodingProblem entity.
func (cduo *CodingDraftUpdateOne) SetCodingProblem(c *CodingProblem) *CodingDraftUpdateOne {
	return cduo.SetCodingProblemID(c.ID)
}

// Mutation returns the CodingDraftMutation object of the builder.
func (cduo *CodingDraftUpdateOne) Mutation() *CodingDraftMutation {
	return cduo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (cduo *CodingDraftUpdateOne) ClearAuthor() *CodingDraftUpdateOne {
	cduo.mutation.ClearAuthor()
	return cduo
}

// ClearCodingProblem clears the "coding_problem" edge to the CodingProblem entity.
func (cduo *CodingDraftUpdateOne) ClearCodingProblem() *CodingDraftUpdateOne {
	cduo.mutation.ClearCodingProblem()
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *CodingDraftUpdateOne) Select(field string, fields ...string) *CodingDraftUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated CodingDraft entity.
func (cduo *CodingDraftUpdateOne) Save(ctx context.Context) (*CodingDraft, error) {
	var (
		err  error
		node *CodingDraft
	)
	if err := cduo.defaults(); err != nil {
		return nil, err
	}
	if len(cduo.hooks) == 0 {
		if err = cduo.check(); err != nil {
			return nil, err
		}
		node, err = cduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingDraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cduo.check(); err != nil {
				return nil, err
			}
			cduo.mutation = mutation
			node, err = cduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cduo.hooks) - 1; i >= 0; i-- {
			if cduo.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *CodingDraftUpdateOne) SaveX(ctx context.Context) *CodingDraft {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *CodingDraftUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *CodingDraftUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cduo *CodingDraftUpdateOne) defaults() error {
	if _, ok := cduo.mutation.UpdateTime(); !ok {
		if codingdraft.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingdraft.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingdraft.UpdateDefaultUpdateTime()
		cduo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cduo *CodingDraftUpdateOne) check() error {
	if _, ok := cduo.mutation.AuthorID(); cduo.mutation.AuthorCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingDraft.author"`)
	}
	if _, ok := cduo.mutation.CodingProblemID(); cduo.mutation.CodingProblemCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingDraft.coding_problem"`)
	}
	return nil
}

func (cduo *CodingDraftUpdateOne) sqlSave(ctx context.Context) (_node *CodingDraft, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingdraft.Table,
			Columns: codingdraft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingdraft.FieldID,
			},
		},
	}
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CodingDraft.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codingdraft.FieldID)
		for _, f := range fields {
			if !codingdraft.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != codingdraft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingdraft.FieldUpdateTime,
		})
	}
	if value, ok := cduo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingdraft.FieldCode,
		})
	}
	if cduo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.AuthorTable,
			Columns: []string{codingdraft.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.AuthorTable,
			Columns: []string{codingdraft.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cduo.mutation.CodingProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.CodingProblemTable,
			Columns: []string{codingdraft.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.CodingProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.CodingProblemTable,
			Columns: []string{codingdraft.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CodingDraft{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingdraft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
