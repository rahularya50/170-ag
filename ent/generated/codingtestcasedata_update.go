// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingtestcase"
	"170-ag/ent/generated/codingtestcasedata"
	"170-ag/ent/generated/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingTestCaseDataUpdate is the builder for updating CodingTestCaseData entities.
type CodingTestCaseDataUpdate struct {
	config
	hooks    []Hook
	mutation *CodingTestCaseDataMutation
}

// Where appends a list predicates to the CodingTestCaseDataUpdate builder.
func (ctcdu *CodingTestCaseDataUpdate) Where(ps ...predicate.CodingTestCaseData) *CodingTestCaseDataUpdate {
	ctcdu.mutation.Where(ps...)
	return ctcdu
}

// SetUpdateTime sets the "update_time" field.
func (ctcdu *CodingTestCaseDataUpdate) SetUpdateTime(t time.Time) *CodingTestCaseDataUpdate {
	ctcdu.mutation.SetUpdateTime(t)
	return ctcdu
}

// SetInput sets the "input" field.
func (ctcdu *CodingTestCaseDataUpdate) SetInput(s string) *CodingTestCaseDataUpdate {
	ctcdu.mutation.SetInput(s)
	return ctcdu
}

// SetNillableInput sets the "input" field if the given value is not nil.
func (ctcdu *CodingTestCaseDataUpdate) SetNillableInput(s *string) *CodingTestCaseDataUpdate {
	if s != nil {
		ctcdu.SetInput(*s)
	}
	return ctcdu
}

// SetOutput sets the "output" field.
func (ctcdu *CodingTestCaseDataUpdate) SetOutput(s string) *CodingTestCaseDataUpdate {
	ctcdu.mutation.SetOutput(s)
	return ctcdu
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (ctcdu *CodingTestCaseDataUpdate) SetNillableOutput(s *string) *CodingTestCaseDataUpdate {
	if s != nil {
		ctcdu.SetOutput(*s)
	}
	return ctcdu
}

// SetTestCaseID sets the "test_case" edge to the CodingTestCase entity by ID.
func (ctcdu *CodingTestCaseDataUpdate) SetTestCaseID(id int) *CodingTestCaseDataUpdate {
	ctcdu.mutation.SetTestCaseID(id)
	return ctcdu
}

// SetTestCase sets the "test_case" edge to the CodingTestCase entity.
func (ctcdu *CodingTestCaseDataUpdate) SetTestCase(c *CodingTestCase) *CodingTestCaseDataUpdate {
	return ctcdu.SetTestCaseID(c.ID)
}

// Mutation returns the CodingTestCaseDataMutation object of the builder.
func (ctcdu *CodingTestCaseDataUpdate) Mutation() *CodingTestCaseDataMutation {
	return ctcdu.mutation
}

// ClearTestCase clears the "test_case" edge to the CodingTestCase entity.
func (ctcdu *CodingTestCaseDataUpdate) ClearTestCase() *CodingTestCaseDataUpdate {
	ctcdu.mutation.ClearTestCase()
	return ctcdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctcdu *CodingTestCaseDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ctcdu.defaults(); err != nil {
		return 0, err
	}
	if len(ctcdu.hooks) == 0 {
		if err = ctcdu.check(); err != nil {
			return 0, err
		}
		affected, err = ctcdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingTestCaseDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctcdu.check(); err != nil {
				return 0, err
			}
			ctcdu.mutation = mutation
			affected, err = ctcdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ctcdu.hooks) - 1; i >= 0; i-- {
			if ctcdu.hooks[i] == nil {
				return 0, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = ctcdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctcdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctcdu *CodingTestCaseDataUpdate) SaveX(ctx context.Context) int {
	affected, err := ctcdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctcdu *CodingTestCaseDataUpdate) Exec(ctx context.Context) error {
	_, err := ctcdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcdu *CodingTestCaseDataUpdate) ExecX(ctx context.Context) {
	if err := ctcdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctcdu *CodingTestCaseDataUpdate) defaults() error {
	if _, ok := ctcdu.mutation.UpdateTime(); !ok {
		if codingtestcasedata.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingtestcasedata.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingtestcasedata.UpdateDefaultUpdateTime()
		ctcdu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ctcdu *CodingTestCaseDataUpdate) check() error {
	if _, ok := ctcdu.mutation.TestCaseID(); ctcdu.mutation.TestCaseCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingTestCaseData.test_case"`)
	}
	return nil
}

func (ctcdu *CodingTestCaseDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingtestcasedata.Table,
			Columns: codingtestcasedata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingtestcasedata.FieldID,
			},
		},
	}
	if ps := ctcdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctcdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingtestcasedata.FieldUpdateTime,
		})
	}
	if value, ok := ctcdu.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingtestcasedata.FieldInput,
		})
	}
	if value, ok := ctcdu.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingtestcasedata.FieldOutput,
		})
	}
	if ctcdu.mutation.TestCaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingtestcasedata.TestCaseTable,
			Columns: []string{codingtestcasedata.TestCaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingtestcase.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctcdu.mutation.TestCaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingtestcasedata.TestCaseTable,
			Columns: []string{codingtestcasedata.TestCaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingtestcase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctcdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingtestcasedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CodingTestCaseDataUpdateOne is the builder for updating a single CodingTestCaseData entity.
type CodingTestCaseDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodingTestCaseDataMutation
}

// SetUpdateTime sets the "update_time" field.
func (ctcduo *CodingTestCaseDataUpdateOne) SetUpdateTime(t time.Time) *CodingTestCaseDataUpdateOne {
	ctcduo.mutation.SetUpdateTime(t)
	return ctcduo
}

// SetInput sets the "input" field.
func (ctcduo *CodingTestCaseDataUpdateOne) SetInput(s string) *CodingTestCaseDataUpdateOne {
	ctcduo.mutation.SetInput(s)
	return ctcduo
}

// SetNillableInput sets the "input" field if the given value is not nil.
func (ctcduo *CodingTestCaseDataUpdateOne) SetNillableInput(s *string) *CodingTestCaseDataUpdateOne {
	if s != nil {
		ctcduo.SetInput(*s)
	}
	return ctcduo
}

// SetOutput sets the "output" field.
func (ctcduo *CodingTestCaseDataUpdateOne) SetOutput(s string) *CodingTestCaseDataUpdateOne {
	ctcduo.mutation.SetOutput(s)
	return ctcduo
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (ctcduo *CodingTestCaseDataUpdateOne) SetNillableOutput(s *string) *CodingTestCaseDataUpdateOne {
	if s != nil {
		ctcduo.SetOutput(*s)
	}
	return ctcduo
}

// SetTestCaseID sets the "test_case" edge to the CodingTestCase entity by ID.
func (ctcduo *CodingTestCaseDataUpdateOne) SetTestCaseID(id int) *CodingTestCaseDataUpdateOne {
	ctcduo.mutation.SetTestCaseID(id)
	return ctcduo
}

// SetTestCase sets the "test_case" edge to the CodingTestCase entity.
func (ctcduo *CodingTestCaseDataUpdateOne) SetTestCase(c *CodingTestCase) *CodingTestCaseDataUpdateOne {
	return ctcduo.SetTestCaseID(c.ID)
}

// Mutation returns the CodingTestCaseDataMutation object of the builder.
func (ctcduo *CodingTestCaseDataUpdateOne) Mutation() *CodingTestCaseDataMutation {
	return ctcduo.mutation
}

// ClearTestCase clears the "test_case" edge to the CodingTestCase entity.
func (ctcduo *CodingTestCaseDataUpdateOne) ClearTestCase() *CodingTestCaseDataUpdateOne {
	ctcduo.mutation.ClearTestCase()
	return ctcduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctcduo *CodingTestCaseDataUpdateOne) Select(field string, fields ...string) *CodingTestCaseDataUpdateOne {
	ctcduo.fields = append([]string{field}, fields...)
	return ctcduo
}

// Save executes the query and returns the updated CodingTestCaseData entity.
func (ctcduo *CodingTestCaseDataUpdateOne) Save(ctx context.Context) (*CodingTestCaseData, error) {
	var (
		err  error
		node *CodingTestCaseData
	)
	if err := ctcduo.defaults(); err != nil {
		return nil, err
	}
	if len(ctcduo.hooks) == 0 {
		if err = ctcduo.check(); err != nil {
			return nil, err
		}
		node, err = ctcduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingTestCaseDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctcduo.check(); err != nil {
				return nil, err
			}
			ctcduo.mutation = mutation
			node, err = ctcduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctcduo.hooks) - 1; i >= 0; i-- {
			if ctcduo.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = ctcduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctcduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctcduo *CodingTestCaseDataUpdateOne) SaveX(ctx context.Context) *CodingTestCaseData {
	node, err := ctcduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctcduo *CodingTestCaseDataUpdateOne) Exec(ctx context.Context) error {
	_, err := ctcduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcduo *CodingTestCaseDataUpdateOne) ExecX(ctx context.Context) {
	if err := ctcduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctcduo *CodingTestCaseDataUpdateOne) defaults() error {
	if _, ok := ctcduo.mutation.UpdateTime(); !ok {
		if codingtestcasedata.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingtestcasedata.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingtestcasedata.UpdateDefaultUpdateTime()
		ctcduo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ctcduo *CodingTestCaseDataUpdateOne) check() error {
	if _, ok := ctcduo.mutation.TestCaseID(); ctcduo.mutation.TestCaseCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingTestCaseData.test_case"`)
	}
	return nil
}

func (ctcduo *CodingTestCaseDataUpdateOne) sqlSave(ctx context.Context) (_node *CodingTestCaseData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingtestcasedata.Table,
			Columns: codingtestcasedata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingtestcasedata.FieldID,
			},
		},
	}
	id, ok := ctcduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CodingTestCaseData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctcduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codingtestcasedata.FieldID)
		for _, f := range fields {
			if !codingtestcasedata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != codingtestcasedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctcduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctcduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingtestcasedata.FieldUpdateTime,
		})
	}
	if value, ok := ctcduo.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingtestcasedata.FieldInput,
		})
	}
	if value, ok := ctcduo.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingtestcasedata.FieldOutput,
		})
	}
	if ctcduo.mutation.TestCaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingtestcasedata.TestCaseTable,
			Columns: []string{codingtestcasedata.TestCaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingtestcase.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctcduo.mutation.TestCaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingtestcasedata.TestCaseTable,
			Columns: []string{codingtestcasedata.TestCaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingtestcase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CodingTestCaseData{config: ctcduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctcduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingtestcasedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
