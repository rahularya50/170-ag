// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/predicate"
	"170-ag/ent/generated/projectscore"
	"170-ag/ent/generated/projectteam"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectTeamUpdate is the builder for updating ProjectTeam entities.
type ProjectTeamUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectTeamMutation
}

// Where appends a list predicates to the ProjectTeamUpdate builder.
func (ptu *ProjectTeamUpdate) Where(ps ...predicate.ProjectTeam) *ProjectTeamUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetUpdateTime sets the "update_time" field.
func (ptu *ProjectTeamUpdate) SetUpdateTime(t time.Time) *ProjectTeamUpdate {
	ptu.mutation.SetUpdateTime(t)
	return ptu
}

// SetTeamID sets the "team_id" field.
func (ptu *ProjectTeamUpdate) SetTeamID(i int32) *ProjectTeamUpdate {
	ptu.mutation.ResetTeamID()
	ptu.mutation.SetTeamID(i)
	return ptu
}

// AddTeamID adds i to the "team_id" field.
func (ptu *ProjectTeamUpdate) AddTeamID(i int32) *ProjectTeamUpdate {
	ptu.mutation.AddTeamID(i)
	return ptu
}

// SetName sets the "name" field.
func (ptu *ProjectTeamUpdate) SetName(s string) *ProjectTeamUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// AddScoreIDs adds the "scores" edge to the ProjectScore entity by IDs.
func (ptu *ProjectTeamUpdate) AddScoreIDs(ids ...int) *ProjectTeamUpdate {
	ptu.mutation.AddScoreIDs(ids...)
	return ptu
}

// AddScores adds the "scores" edges to the ProjectScore entity.
func (ptu *ProjectTeamUpdate) AddScores(p ...*ProjectScore) *ProjectTeamUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddScoreIDs(ids...)
}

// Mutation returns the ProjectTeamMutation object of the builder.
func (ptu *ProjectTeamUpdate) Mutation() *ProjectTeamMutation {
	return ptu.mutation
}

// ClearScores clears all "scores" edges to the ProjectScore entity.
func (ptu *ProjectTeamUpdate) ClearScores() *ProjectTeamUpdate {
	ptu.mutation.ClearScores()
	return ptu
}

// RemoveScoreIDs removes the "scores" edge to ProjectScore entities by IDs.
func (ptu *ProjectTeamUpdate) RemoveScoreIDs(ids ...int) *ProjectTeamUpdate {
	ptu.mutation.RemoveScoreIDs(ids...)
	return ptu
}

// RemoveScores removes "scores" edges to ProjectScore entities.
func (ptu *ProjectTeamUpdate) RemoveScores(p ...*ProjectScore) *ProjectTeamUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveScoreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProjectTeamUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ptu.defaults(); err != nil {
		return 0, err
	}
	if len(ptu.hooks) == 0 {
		if err = ptu.check(); err != nil {
			return 0, err
		}
		affected, err = ptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectTeamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptu.check(); err != nil {
				return 0, err
			}
			ptu.mutation = mutation
			affected, err = ptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ptu.hooks) - 1; i >= 0; i-- {
			if ptu.hooks[i] == nil {
				return 0, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = ptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProjectTeamUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProjectTeamUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProjectTeamUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *ProjectTeamUpdate) defaults() error {
	if _, ok := ptu.mutation.UpdateTime(); !ok {
		if projectteam.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized projectteam.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := projectteam.UpdateDefaultUpdateTime()
		ptu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProjectTeamUpdate) check() error {
	if v, ok := ptu.mutation.Name(); ok {
		if err := projectteam.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ProjectTeam.name": %w`, err)}
		}
	}
	return nil
}

func (ptu *ProjectTeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectteam.Table,
			Columns: projectteam.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectteam.FieldID,
			},
		},
	}
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: projectteam.FieldUpdateTime,
		})
	}
	if value, ok := ptu.mutation.TeamID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: projectteam.FieldTeamID,
		})
	}
	if value, ok := ptu.mutation.AddedTeamID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: projectteam.FieldTeamID,
		})
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectteam.FieldName,
		})
	}
	if ptu.mutation.ScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectteam.ScoresTable,
			Columns: []string{projectteam.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectscore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedScoresIDs(); len(nodes) > 0 && !ptu.mutation.ScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectteam.ScoresTable,
			Columns: []string{projectteam.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectteam.ScoresTable,
			Columns: []string{projectteam.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectteam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProjectTeamUpdateOne is the builder for updating a single ProjectTeam entity.
type ProjectTeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectTeamMutation
}

// SetUpdateTime sets the "update_time" field.
func (ptuo *ProjectTeamUpdateOne) SetUpdateTime(t time.Time) *ProjectTeamUpdateOne {
	ptuo.mutation.SetUpdateTime(t)
	return ptuo
}

// SetTeamID sets the "team_id" field.
func (ptuo *ProjectTeamUpdateOne) SetTeamID(i int32) *ProjectTeamUpdateOne {
	ptuo.mutation.ResetTeamID()
	ptuo.mutation.SetTeamID(i)
	return ptuo
}

// AddTeamID adds i to the "team_id" field.
func (ptuo *ProjectTeamUpdateOne) AddTeamID(i int32) *ProjectTeamUpdateOne {
	ptuo.mutation.AddTeamID(i)
	return ptuo
}

// SetName sets the "name" field.
func (ptuo *ProjectTeamUpdateOne) SetName(s string) *ProjectTeamUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// AddScoreIDs adds the "scores" edge to the ProjectScore entity by IDs.
func (ptuo *ProjectTeamUpdateOne) AddScoreIDs(ids ...int) *ProjectTeamUpdateOne {
	ptuo.mutation.AddScoreIDs(ids...)
	return ptuo
}

// AddScores adds the "scores" edges to the ProjectScore entity.
func (ptuo *ProjectTeamUpdateOne) AddScores(p ...*ProjectScore) *ProjectTeamUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddScoreIDs(ids...)
}

// Mutation returns the ProjectTeamMutation object of the builder.
func (ptuo *ProjectTeamUpdateOne) Mutation() *ProjectTeamMutation {
	return ptuo.mutation
}

// ClearScores clears all "scores" edges to the ProjectScore entity.
func (ptuo *ProjectTeamUpdateOne) ClearScores() *ProjectTeamUpdateOne {
	ptuo.mutation.ClearScores()
	return ptuo
}

// RemoveScoreIDs removes the "scores" edge to ProjectScore entities by IDs.
func (ptuo *ProjectTeamUpdateOne) RemoveScoreIDs(ids ...int) *ProjectTeamUpdateOne {
	ptuo.mutation.RemoveScoreIDs(ids...)
	return ptuo
}

// RemoveScores removes "scores" edges to ProjectScore entities.
func (ptuo *ProjectTeamUpdateOne) RemoveScores(p ...*ProjectScore) *ProjectTeamUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveScoreIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProjectTeamUpdateOne) Select(field string, fields ...string) *ProjectTeamUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProjectTeam entity.
func (ptuo *ProjectTeamUpdateOne) Save(ctx context.Context) (*ProjectTeam, error) {
	var (
		err  error
		node *ProjectTeam
	)
	if err := ptuo.defaults(); err != nil {
		return nil, err
	}
	if len(ptuo.hooks) == 0 {
		if err = ptuo.check(); err != nil {
			return nil, err
		}
		node, err = ptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectTeamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptuo.check(); err != nil {
				return nil, err
			}
			ptuo.mutation = mutation
			node, err = ptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptuo.hooks) - 1; i >= 0; i-- {
			if ptuo.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = ptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProjectTeamUpdateOne) SaveX(ctx context.Context) *ProjectTeam {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProjectTeamUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProjectTeamUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *ProjectTeamUpdateOne) defaults() error {
	if _, ok := ptuo.mutation.UpdateTime(); !ok {
		if projectteam.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized projectteam.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := projectteam.UpdateDefaultUpdateTime()
		ptuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProjectTeamUpdateOne) check() error {
	if v, ok := ptuo.mutation.Name(); ok {
		if err := projectteam.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ProjectTeam.name": %w`, err)}
		}
	}
	return nil
}

func (ptuo *ProjectTeamUpdateOne) sqlSave(ctx context.Context) (_node *ProjectTeam, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectteam.Table,
			Columns: projectteam.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectteam.FieldID,
			},
		},
	}
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProjectTeam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectteam.FieldID)
		for _, f := range fields {
			if !projectteam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != projectteam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: projectteam.FieldUpdateTime,
		})
	}
	if value, ok := ptuo.mutation.TeamID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: projectteam.FieldTeamID,
		})
	}
	if value, ok := ptuo.mutation.AddedTeamID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: projectteam.FieldTeamID,
		})
	}
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectteam.FieldName,
		})
	}
	if ptuo.mutation.ScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectteam.ScoresTable,
			Columns: []string{projectteam.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectscore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedScoresIDs(); len(nodes) > 0 && !ptuo.mutation.ScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectteam.ScoresTable,
			Columns: []string{projectteam.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectteam.ScoresTable,
			Columns: []string{projectteam.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectTeam{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectteam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
