// Code generated by entc, DO NOT EDIT.

package projectscore

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the projectscore type in the database.
	Label = "project_score"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCaseID holds the string denoting the case_id field in the database.
	FieldCaseID = "case_id"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the projectscore in the database.
	Table = "project_scores"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "project_scores"
	// TeamInverseTable is the table name for the ProjectTeam entity.
	// It exists in this package in order to avoid circular dependency with the "projectteam" package.
	TeamInverseTable = "project_teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "project_team_scores"
)

// Columns holds all SQL columns for projectscore fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCaseID,
	FieldScore,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "project_scores"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_team_scores",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "170-ag/ent/generated/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeSmall  Type = "small"
	TypeMedium Type = "medium"
	TypeLarge  Type = "large"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSmall, TypeMedium, TypeLarge:
		return nil
	default:
		return fmt.Errorf("projectscore: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
