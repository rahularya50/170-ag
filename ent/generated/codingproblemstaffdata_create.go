// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingproblem"
	"170-ag/ent/generated/codingproblemstaffdata"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingProblemStaffDataCreate is the builder for creating a CodingProblemStaffData entity.
type CodingProblemStaffDataCreate struct {
	config
	mutation *CodingProblemStaffDataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInput sets the "input" field.
func (cpsdc *CodingProblemStaffDataCreate) SetInput(s string) *CodingProblemStaffDataCreate {
	cpsdc.mutation.SetInput(s)
	return cpsdc
}

// SetCodingProblemID sets the "coding_problem" edge to the CodingProblem entity by ID.
func (cpsdc *CodingProblemStaffDataCreate) SetCodingProblemID(id int) *CodingProblemStaffDataCreate {
	cpsdc.mutation.SetCodingProblemID(id)
	return cpsdc
}

// SetCodingProblem sets the "coding_problem" edge to the CodingProblem entity.
func (cpsdc *CodingProblemStaffDataCreate) SetCodingProblem(c *CodingProblem) *CodingProblemStaffDataCreate {
	return cpsdc.SetCodingProblemID(c.ID)
}

// Mutation returns the CodingProblemStaffDataMutation object of the builder.
func (cpsdc *CodingProblemStaffDataCreate) Mutation() *CodingProblemStaffDataMutation {
	return cpsdc.mutation
}

// Save creates the CodingProblemStaffData in the database.
func (cpsdc *CodingProblemStaffDataCreate) Save(ctx context.Context) (*CodingProblemStaffData, error) {
	var (
		err  error
		node *CodingProblemStaffData
	)
	if len(cpsdc.hooks) == 0 {
		if err = cpsdc.check(); err != nil {
			return nil, err
		}
		node, err = cpsdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingProblemStaffDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpsdc.check(); err != nil {
				return nil, err
			}
			cpsdc.mutation = mutation
			if node, err = cpsdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cpsdc.hooks) - 1; i >= 0; i-- {
			if cpsdc.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cpsdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpsdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cpsdc *CodingProblemStaffDataCreate) SaveX(ctx context.Context) *CodingProblemStaffData {
	v, err := cpsdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpsdc *CodingProblemStaffDataCreate) Exec(ctx context.Context) error {
	_, err := cpsdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpsdc *CodingProblemStaffDataCreate) ExecX(ctx context.Context) {
	if err := cpsdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpsdc *CodingProblemStaffDataCreate) check() error {
	if _, ok := cpsdc.mutation.Input(); !ok {
		return &ValidationError{Name: "input", err: errors.New(`generated: missing required field "input"`)}
	}
	if _, ok := cpsdc.mutation.CodingProblemID(); !ok {
		return &ValidationError{Name: "coding_problem", err: errors.New("generated: missing required edge \"coding_problem\"")}
	}
	return nil
}

func (cpsdc *CodingProblemStaffDataCreate) sqlSave(ctx context.Context) (*CodingProblemStaffData, error) {
	_node, _spec := cpsdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpsdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cpsdc *CodingProblemStaffDataCreate) createSpec() (*CodingProblemStaffData, *sqlgraph.CreateSpec) {
	var (
		_node = &CodingProblemStaffData{config: cpsdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: codingproblemstaffdata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingproblemstaffdata.FieldID,
			},
		}
	)
	_spec.OnConflict = cpsdc.conflict
	if value, ok := cpsdc.mutation.Input(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingproblemstaffdata.FieldInput,
		})
		_node.Input = value
	}
	if nodes := cpsdc.mutation.CodingProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingproblemstaffdata.CodingProblemTable,
			Columns: []string{codingproblemstaffdata.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingProblemStaffData.Create().
//		SetInput(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingProblemStaffDataUpsert) {
//			SetInput(v+v).
//		}).
//		Exec(ctx)
//
func (cpsdc *CodingProblemStaffDataCreate) OnConflict(opts ...sql.ConflictOption) *CodingProblemStaffDataUpsertOne {
	cpsdc.conflict = opts
	return &CodingProblemStaffDataUpsertOne{
		create: cpsdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingProblemStaffData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cpsdc *CodingProblemStaffDataCreate) OnConflictColumns(columns ...string) *CodingProblemStaffDataUpsertOne {
	cpsdc.conflict = append(cpsdc.conflict, sql.ConflictColumns(columns...))
	return &CodingProblemStaffDataUpsertOne{
		create: cpsdc,
	}
}

type (
	// CodingProblemStaffDataUpsertOne is the builder for "upsert"-ing
	//  one CodingProblemStaffData node.
	CodingProblemStaffDataUpsertOne struct {
		create *CodingProblemStaffDataCreate
	}

	// CodingProblemStaffDataUpsert is the "OnConflict" setter.
	CodingProblemStaffDataUpsert struct {
		*sql.UpdateSet
	}
)

// SetInput sets the "input" field.
func (u *CodingProblemStaffDataUpsert) SetInput(v string) *CodingProblemStaffDataUpsert {
	u.Set(codingproblemstaffdata.FieldInput, v)
	return u
}

// UpdateInput sets the "input" field to the value that was provided on create.
func (u *CodingProblemStaffDataUpsert) UpdateInput() *CodingProblemStaffDataUpsert {
	u.SetExcluded(codingproblemstaffdata.FieldInput)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CodingProblemStaffData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingProblemStaffDataUpsertOne) UpdateNewValues() *CodingProblemStaffDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CodingProblemStaffData.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CodingProblemStaffDataUpsertOne) Ignore() *CodingProblemStaffDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingProblemStaffDataUpsertOne) DoNothing() *CodingProblemStaffDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingProblemStaffDataCreate.OnConflict
// documentation for more info.
func (u *CodingProblemStaffDataUpsertOne) Update(set func(*CodingProblemStaffDataUpsert)) *CodingProblemStaffDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingProblemStaffDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetInput sets the "input" field.
func (u *CodingProblemStaffDataUpsertOne) SetInput(v string) *CodingProblemStaffDataUpsertOne {
	return u.Update(func(s *CodingProblemStaffDataUpsert) {
		s.SetInput(v)
	})
}

// UpdateInput sets the "input" field to the value that was provided on create.
func (u *CodingProblemStaffDataUpsertOne) UpdateInput() *CodingProblemStaffDataUpsertOne {
	return u.Update(func(s *CodingProblemStaffDataUpsert) {
		s.UpdateInput()
	})
}

// Exec executes the query.
func (u *CodingProblemStaffDataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingProblemStaffDataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingProblemStaffDataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CodingProblemStaffDataUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CodingProblemStaffDataUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CodingProblemStaffDataCreateBulk is the builder for creating many CodingProblemStaffData entities in bulk.
type CodingProblemStaffDataCreateBulk struct {
	config
	builders []*CodingProblemStaffDataCreate
	conflict []sql.ConflictOption
}

// Save creates the CodingProblemStaffData entities in the database.
func (cpsdcb *CodingProblemStaffDataCreateBulk) Save(ctx context.Context) ([]*CodingProblemStaffData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpsdcb.builders))
	nodes := make([]*CodingProblemStaffData, len(cpsdcb.builders))
	mutators := make([]Mutator, len(cpsdcb.builders))
	for i := range cpsdcb.builders {
		func(i int, root context.Context) {
			builder := cpsdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodingProblemStaffDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpsdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cpsdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpsdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpsdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpsdcb *CodingProblemStaffDataCreateBulk) SaveX(ctx context.Context) []*CodingProblemStaffData {
	v, err := cpsdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpsdcb *CodingProblemStaffDataCreateBulk) Exec(ctx context.Context) error {
	_, err := cpsdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpsdcb *CodingProblemStaffDataCreateBulk) ExecX(ctx context.Context) {
	if err := cpsdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingProblemStaffData.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingProblemStaffDataUpsert) {
//			SetInput(v+v).
//		}).
//		Exec(ctx)
//
func (cpsdcb *CodingProblemStaffDataCreateBulk) OnConflict(opts ...sql.ConflictOption) *CodingProblemStaffDataUpsertBulk {
	cpsdcb.conflict = opts
	return &CodingProblemStaffDataUpsertBulk{
		create: cpsdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingProblemStaffData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cpsdcb *CodingProblemStaffDataCreateBulk) OnConflictColumns(columns ...string) *CodingProblemStaffDataUpsertBulk {
	cpsdcb.conflict = append(cpsdcb.conflict, sql.ConflictColumns(columns...))
	return &CodingProblemStaffDataUpsertBulk{
		create: cpsdcb,
	}
}

// CodingProblemStaffDataUpsertBulk is the builder for "upsert"-ing
// a bulk of CodingProblemStaffData nodes.
type CodingProblemStaffDataUpsertBulk struct {
	create *CodingProblemStaffDataCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CodingProblemStaffData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingProblemStaffDataUpsertBulk) UpdateNewValues() *CodingProblemStaffDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CodingProblemStaffData.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CodingProblemStaffDataUpsertBulk) Ignore() *CodingProblemStaffDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingProblemStaffDataUpsertBulk) DoNothing() *CodingProblemStaffDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingProblemStaffDataCreateBulk.OnConflict
// documentation for more info.
func (u *CodingProblemStaffDataUpsertBulk) Update(set func(*CodingProblemStaffDataUpsert)) *CodingProblemStaffDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingProblemStaffDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetInput sets the "input" field.
func (u *CodingProblemStaffDataUpsertBulk) SetInput(v string) *CodingProblemStaffDataUpsertBulk {
	return u.Update(func(s *CodingProblemStaffDataUpsert) {
		s.SetInput(v)
	})
}

// UpdateInput sets the "input" field to the value that was provided on create.
func (u *CodingProblemStaffDataUpsertBulk) UpdateInput() *CodingProblemStaffDataUpsertBulk {
	return u.Update(func(s *CodingProblemStaffDataUpsert) {
		s.UpdateInput()
	})
}

// Exec executes the query.
func (u *CodingProblemStaffDataUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CodingProblemStaffDataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingProblemStaffDataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingProblemStaffDataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
