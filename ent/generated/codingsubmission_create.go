// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingproblem"
	"170-ag/ent/generated/codingsubmission"
	"170-ag/ent/generated/codingsubmissionstaffdata"
	"170-ag/ent/generated/user"
	"170-ag/ent/models"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingSubmissionCreate is the builder for creating a CodingSubmission entity.
type CodingSubmissionCreate struct {
	config
	mutation *CodingSubmissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (csc *CodingSubmissionCreate) SetCreateTime(t time.Time) *CodingSubmissionCreate {
	csc.mutation.SetCreateTime(t)
	return csc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (csc *CodingSubmissionCreate) SetNillableCreateTime(t *time.Time) *CodingSubmissionCreate {
	if t != nil {
		csc.SetCreateTime(*t)
	}
	return csc
}

// SetUpdateTime sets the "update_time" field.
func (csc *CodingSubmissionCreate) SetUpdateTime(t time.Time) *CodingSubmissionCreate {
	csc.mutation.SetUpdateTime(t)
	return csc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (csc *CodingSubmissionCreate) SetNillableUpdateTime(t *time.Time) *CodingSubmissionCreate {
	if t != nil {
		csc.SetUpdateTime(*t)
	}
	return csc
}

// SetCode sets the "code" field.
func (csc *CodingSubmissionCreate) SetCode(s string) *CodingSubmissionCreate {
	csc.mutation.SetCode(s)
	return csc
}

// SetStatus sets the "status" field.
func (csc *CodingSubmissionCreate) SetStatus(c codingsubmission.Status) *CodingSubmissionCreate {
	csc.mutation.SetStatus(c)
	return csc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (csc *CodingSubmissionCreate) SetNillableStatus(c *codingsubmission.Status) *CodingSubmissionCreate {
	if c != nil {
		csc.SetStatus(*c)
	}
	return csc
}

// SetPoints sets the "points" field.
func (csc *CodingSubmissionCreate) SetPoints(i int) *CodingSubmissionCreate {
	csc.mutation.SetPoints(i)
	return csc
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (csc *CodingSubmissionCreate) SetNillablePoints(i *int) *CodingSubmissionCreate {
	if i != nil {
		csc.SetPoints(*i)
	}
	return csc
}

// SetResults sets the "results" field.
func (csc *CodingSubmissionCreate) SetResults(msr models.CodingSubmissionResults) *CodingSubmissionCreate {
	csc.mutation.SetResults(msr)
	return csc
}

// SetNillableResults sets the "results" field if the given value is not nil.
func (csc *CodingSubmissionCreate) SetNillableResults(msr *models.CodingSubmissionResults) *CodingSubmissionCreate {
	if msr != nil {
		csc.SetResults(*msr)
	}
	return csc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (csc *CodingSubmissionCreate) SetAuthorID(id int) *CodingSubmissionCreate {
	csc.mutation.SetAuthorID(id)
	return csc
}

// SetAuthor sets the "author" edge to the User entity.
func (csc *CodingSubmissionCreate) SetAuthor(u *User) *CodingSubmissionCreate {
	return csc.SetAuthorID(u.ID)
}

// SetCodingProblemID sets the "coding_problem" edge to the CodingProblem entity by ID.
func (csc *CodingSubmissionCreate) SetCodingProblemID(id int) *CodingSubmissionCreate {
	csc.mutation.SetCodingProblemID(id)
	return csc
}

// SetCodingProblem sets the "coding_problem" edge to the CodingProblem entity.
func (csc *CodingSubmissionCreate) SetCodingProblem(c *CodingProblem) *CodingSubmissionCreate {
	return csc.SetCodingProblemID(c.ID)
}

// SetStaffDataID sets the "staff_data" edge to the CodingSubmissionStaffData entity by ID.
func (csc *CodingSubmissionCreate) SetStaffDataID(id int) *CodingSubmissionCreate {
	csc.mutation.SetStaffDataID(id)
	return csc
}

// SetNillableStaffDataID sets the "staff_data" edge to the CodingSubmissionStaffData entity by ID if the given value is not nil.
func (csc *CodingSubmissionCreate) SetNillableStaffDataID(id *int) *CodingSubmissionCreate {
	if id != nil {
		csc = csc.SetStaffDataID(*id)
	}
	return csc
}

// SetStaffData sets the "staff_data" edge to the CodingSubmissionStaffData entity.
func (csc *CodingSubmissionCreate) SetStaffData(c *CodingSubmissionStaffData) *CodingSubmissionCreate {
	return csc.SetStaffDataID(c.ID)
}

// Mutation returns the CodingSubmissionMutation object of the builder.
func (csc *CodingSubmissionCreate) Mutation() *CodingSubmissionMutation {
	return csc.mutation
}

// Save creates the CodingSubmission in the database.
func (csc *CodingSubmissionCreate) Save(ctx context.Context) (*CodingSubmission, error) {
	var (
		err  error
		node *CodingSubmission
	)
	if err := csc.defaults(); err != nil {
		return nil, err
	}
	if len(csc.hooks) == 0 {
		if err = csc.check(); err != nil {
			return nil, err
		}
		node, err = csc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingSubmissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csc.check(); err != nil {
				return nil, err
			}
			csc.mutation = mutation
			if node, err = csc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(csc.hooks) - 1; i >= 0; i-- {
			if csc.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = csc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CodingSubmissionCreate) SaveX(ctx context.Context) *CodingSubmission {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CodingSubmissionCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CodingSubmissionCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CodingSubmissionCreate) defaults() error {
	if _, ok := csc.mutation.CreateTime(); !ok {
		if codingsubmission.DefaultCreateTime == nil {
			return fmt.Errorf("generated: uninitialized codingsubmission.DefaultCreateTime (forgotten import generated/runtime?)")
		}
		v := codingsubmission.DefaultCreateTime()
		csc.mutation.SetCreateTime(v)
	}
	if _, ok := csc.mutation.UpdateTime(); !ok {
		if codingsubmission.DefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingsubmission.DefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingsubmission.DefaultUpdateTime()
		csc.mutation.SetUpdateTime(v)
	}
	if _, ok := csc.mutation.Status(); !ok {
		v := codingsubmission.DefaultStatus
		csc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csc *CodingSubmissionCreate) check() error {
	if _, ok := csc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "CodingSubmission.create_time"`)}
	}
	if _, ok := csc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "CodingSubmission.update_time"`)}
	}
	if _, ok := csc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`generated: missing required field "CodingSubmission.code"`)}
	}
	if v, ok := csc.mutation.Code(); ok {
		if err := codingsubmission.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`generated: validator failed for field "CodingSubmission.code": %w`, err)}
		}
	}
	if _, ok := csc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "CodingSubmission.status"`)}
	}
	if v, ok := csc.mutation.Status(); ok {
		if err := codingsubmission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "CodingSubmission.status": %w`, err)}
		}
	}
	if _, ok := csc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`generated: missing required edge "CodingSubmission.author"`)}
	}
	if _, ok := csc.mutation.CodingProblemID(); !ok {
		return &ValidationError{Name: "coding_problem", err: errors.New(`generated: missing required edge "CodingSubmission.coding_problem"`)}
	}
	return nil
}

func (csc *CodingSubmissionCreate) sqlSave(ctx context.Context) (*CodingSubmission, error) {
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (csc *CodingSubmissionCreate) createSpec() (*CodingSubmission, *sqlgraph.CreateSpec) {
	var (
		_node = &CodingSubmission{config: csc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: codingsubmission.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingsubmission.FieldID,
			},
		}
	)
	_spec.OnConflict = csc.conflict
	if value, ok := csc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingsubmission.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := csc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingsubmission.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := csc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmission.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := csc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: codingsubmission.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := csc.mutation.Points(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: codingsubmission.FieldPoints,
		})
		_node.Points = &value
	}
	if value, ok := csc.mutation.Results(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: codingsubmission.FieldResults,
		})
		_node.Results = value
	}
	if nodes := csc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingsubmission.AuthorTable,
			Columns: []string{codingsubmission.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coding_submission_author = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CodingProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingsubmission.CodingProblemTable,
			Columns: []string{codingsubmission.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coding_submission_coding_problem = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.StaffDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   codingsubmission.StaffDataTable,
			Columns: []string{codingsubmission.StaffDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingsubmissionstaffdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coding_submission_staff_data_coding_submission = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingSubmission.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingSubmissionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (csc *CodingSubmissionCreate) OnConflict(opts ...sql.ConflictOption) *CodingSubmissionUpsertOne {
	csc.conflict = opts
	return &CodingSubmissionUpsertOne{
		create: csc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingSubmission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (csc *CodingSubmissionCreate) OnConflictColumns(columns ...string) *CodingSubmissionUpsertOne {
	csc.conflict = append(csc.conflict, sql.ConflictColumns(columns...))
	return &CodingSubmissionUpsertOne{
		create: csc,
	}
}

type (
	// CodingSubmissionUpsertOne is the builder for "upsert"-ing
	//  one CodingSubmission node.
	CodingSubmissionUpsertOne struct {
		create *CodingSubmissionCreate
	}

	// CodingSubmissionUpsert is the "OnConflict" setter.
	CodingSubmissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *CodingSubmissionUpsert) SetCreateTime(v time.Time) *CodingSubmissionUpsert {
	u.Set(codingsubmission.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingSubmissionUpsert) UpdateCreateTime() *CodingSubmissionUpsert {
	u.SetExcluded(codingsubmission.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingSubmissionUpsert) SetUpdateTime(v time.Time) *CodingSubmissionUpsert {
	u.Set(codingsubmission.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingSubmissionUpsert) UpdateUpdateTime() *CodingSubmissionUpsert {
	u.SetExcluded(codingsubmission.FieldUpdateTime)
	return u
}

// SetCode sets the "code" field.
func (u *CodingSubmissionUpsert) SetCode(v string) *CodingSubmissionUpsert {
	u.Set(codingsubmission.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CodingSubmissionUpsert) UpdateCode() *CodingSubmissionUpsert {
	u.SetExcluded(codingsubmission.FieldCode)
	return u
}

// SetStatus sets the "status" field.
func (u *CodingSubmissionUpsert) SetStatus(v codingsubmission.Status) *CodingSubmissionUpsert {
	u.Set(codingsubmission.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CodingSubmissionUpsert) UpdateStatus() *CodingSubmissionUpsert {
	u.SetExcluded(codingsubmission.FieldStatus)
	return u
}

// SetPoints sets the "points" field.
func (u *CodingSubmissionUpsert) SetPoints(v int) *CodingSubmissionUpsert {
	u.Set(codingsubmission.FieldPoints, v)
	return u
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *CodingSubmissionUpsert) UpdatePoints() *CodingSubmissionUpsert {
	u.SetExcluded(codingsubmission.FieldPoints)
	return u
}

// AddPoints adds v to the "points" field.
func (u *CodingSubmissionUpsert) AddPoints(v int) *CodingSubmissionUpsert {
	u.Add(codingsubmission.FieldPoints, v)
	return u
}

// ClearPoints clears the value of the "points" field.
func (u *CodingSubmissionUpsert) ClearPoints() *CodingSubmissionUpsert {
	u.SetNull(codingsubmission.FieldPoints)
	return u
}

// SetResults sets the "results" field.
func (u *CodingSubmissionUpsert) SetResults(v models.CodingSubmissionResults) *CodingSubmissionUpsert {
	u.Set(codingsubmission.FieldResults, v)
	return u
}

// UpdateResults sets the "results" field to the value that was provided on create.
func (u *CodingSubmissionUpsert) UpdateResults() *CodingSubmissionUpsert {
	u.SetExcluded(codingsubmission.FieldResults)
	return u
}

// ClearResults clears the value of the "results" field.
func (u *CodingSubmissionUpsert) ClearResults() *CodingSubmissionUpsert {
	u.SetNull(codingsubmission.FieldResults)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CodingSubmission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingSubmissionUpsertOne) UpdateNewValues() *CodingSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(codingsubmission.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(codingsubmission.FieldCode)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CodingSubmission.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CodingSubmissionUpsertOne) Ignore() *CodingSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingSubmissionUpsertOne) DoNothing() *CodingSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingSubmissionCreate.OnConflict
// documentation for more info.
func (u *CodingSubmissionUpsertOne) Update(set func(*CodingSubmissionUpsert)) *CodingSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingSubmissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *CodingSubmissionUpsertOne) SetCreateTime(v time.Time) *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingSubmissionUpsertOne) UpdateCreateTime() *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingSubmissionUpsertOne) SetUpdateTime(v time.Time) *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingSubmissionUpsertOne) UpdateUpdateTime() *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetCode sets the "code" field.
func (u *CodingSubmissionUpsertOne) SetCode(v string) *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CodingSubmissionUpsertOne) UpdateCode() *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *CodingSubmissionUpsertOne) SetStatus(v codingsubmission.Status) *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CodingSubmissionUpsertOne) UpdateStatus() *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateStatus()
	})
}

// SetPoints sets the "points" field.
func (u *CodingSubmissionUpsertOne) SetPoints(v int) *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *CodingSubmissionUpsertOne) AddPoints(v int) *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *CodingSubmissionUpsertOne) UpdatePoints() *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdatePoints()
	})
}

// ClearPoints clears the value of the "points" field.
func (u *CodingSubmissionUpsertOne) ClearPoints() *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.ClearPoints()
	})
}

// SetResults sets the "results" field.
func (u *CodingSubmissionUpsertOne) SetResults(v models.CodingSubmissionResults) *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetResults(v)
	})
}

// UpdateResults sets the "results" field to the value that was provided on create.
func (u *CodingSubmissionUpsertOne) UpdateResults() *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateResults()
	})
}

// ClearResults clears the value of the "results" field.
func (u *CodingSubmissionUpsertOne) ClearResults() *CodingSubmissionUpsertOne {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.ClearResults()
	})
}

// Exec executes the query.
func (u *CodingSubmissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingSubmissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingSubmissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CodingSubmissionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CodingSubmissionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CodingSubmissionCreateBulk is the builder for creating many CodingSubmission entities in bulk.
type CodingSubmissionCreateBulk struct {
	config
	builders []*CodingSubmissionCreate
	conflict []sql.ConflictOption
}

// Save creates the CodingSubmission entities in the database.
func (cscb *CodingSubmissionCreateBulk) Save(ctx context.Context) ([]*CodingSubmission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CodingSubmission, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodingSubmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CodingSubmissionCreateBulk) SaveX(ctx context.Context) []*CodingSubmission {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CodingSubmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CodingSubmissionCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingSubmission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingSubmissionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (cscb *CodingSubmissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *CodingSubmissionUpsertBulk {
	cscb.conflict = opts
	return &CodingSubmissionUpsertBulk{
		create: cscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingSubmission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cscb *CodingSubmissionCreateBulk) OnConflictColumns(columns ...string) *CodingSubmissionUpsertBulk {
	cscb.conflict = append(cscb.conflict, sql.ConflictColumns(columns...))
	return &CodingSubmissionUpsertBulk{
		create: cscb,
	}
}

// CodingSubmissionUpsertBulk is the builder for "upsert"-ing
// a bulk of CodingSubmission nodes.
type CodingSubmissionUpsertBulk struct {
	create *CodingSubmissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CodingSubmission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingSubmissionUpsertBulk) UpdateNewValues() *CodingSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(codingsubmission.FieldCreateTime)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(codingsubmission.FieldCode)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CodingSubmission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CodingSubmissionUpsertBulk) Ignore() *CodingSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingSubmissionUpsertBulk) DoNothing() *CodingSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingSubmissionCreateBulk.OnConflict
// documentation for more info.
func (u *CodingSubmissionUpsertBulk) Update(set func(*CodingSubmissionUpsert)) *CodingSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingSubmissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *CodingSubmissionUpsertBulk) SetCreateTime(v time.Time) *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingSubmissionUpsertBulk) UpdateCreateTime() *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingSubmissionUpsertBulk) SetUpdateTime(v time.Time) *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingSubmissionUpsertBulk) UpdateUpdateTime() *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetCode sets the "code" field.
func (u *CodingSubmissionUpsertBulk) SetCode(v string) *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CodingSubmissionUpsertBulk) UpdateCode() *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateCode()
	})
}

// SetStatus sets the "status" field.
func (u *CodingSubmissionUpsertBulk) SetStatus(v codingsubmission.Status) *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CodingSubmissionUpsertBulk) UpdateStatus() *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateStatus()
	})
}

// SetPoints sets the "points" field.
func (u *CodingSubmissionUpsertBulk) SetPoints(v int) *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *CodingSubmissionUpsertBulk) AddPoints(v int) *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *CodingSubmissionUpsertBulk) UpdatePoints() *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdatePoints()
	})
}

// ClearPoints clears the value of the "points" field.
func (u *CodingSubmissionUpsertBulk) ClearPoints() *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.ClearPoints()
	})
}

// SetResults sets the "results" field.
func (u *CodingSubmissionUpsertBulk) SetResults(v models.CodingSubmissionResults) *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.SetResults(v)
	})
}

// UpdateResults sets the "results" field to the value that was provided on create.
func (u *CodingSubmissionUpsertBulk) UpdateResults() *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.UpdateResults()
	})
}

// ClearResults clears the value of the "results" field.
func (u *CodingSubmissionUpsertBulk) ClearResults() *CodingSubmissionUpsertBulk {
	return u.Update(func(s *CodingSubmissionUpsert) {
		s.ClearResults()
	})
}

// Exec executes the query.
func (u *CodingSubmissionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CodingSubmissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingSubmissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingSubmissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
