// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingdraft"
	"170-ag/ent/generated/codingproblem"
	"170-ag/ent/generated/codingsubmission"
	"170-ag/ent/generated/predicate"
	"170-ag/ent/generated/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 4)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   codingdraft.Table,
			Columns: codingdraft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingdraft.FieldID,
			},
		},
		Type: "CodingDraft",
		Fields: map[string]*sqlgraph.FieldSpec{
			codingdraft.FieldCode: {Type: field.TypeString, Column: codingdraft.FieldCode},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   codingproblem.Table,
			Columns: codingproblem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingproblem.FieldID,
			},
		},
		Type: "CodingProblem",
		Fields: map[string]*sqlgraph.FieldSpec{
			codingproblem.FieldName:      {Type: field.TypeString, Column: codingproblem.FieldName},
			codingproblem.FieldStatement: {Type: field.TypeString, Column: codingproblem.FieldStatement},
			codingproblem.FieldReleased:  {Type: field.TypeBool, Column: codingproblem.FieldReleased},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   codingsubmission.Table,
			Columns: codingsubmission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingsubmission.FieldID,
			},
		},
		Type: "CodingSubmission",
		Fields: map[string]*sqlgraph.FieldSpec{
			codingsubmission.FieldCode:   {Type: field.TypeString, Column: codingsubmission.FieldCode},
			codingsubmission.FieldStatus: {Type: field.TypeEnum, Column: codingsubmission.FieldStatus},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldEmail:   {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldName:    {Type: field.TypeString, Column: user.FieldName},
			user.FieldIsStaff: {Type: field.TypeBool, Column: user.FieldIsStaff},
		},
	}
	graph.MustAddE(
		"author",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.AuthorTable,
			Columns: []string{codingdraft.AuthorColumn},
			Bidi:    false,
		},
		"CodingDraft",
		"User",
	)
	graph.MustAddE(
		"coding_problem",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.CodingProblemTable,
			Columns: []string{codingdraft.CodingProblemColumn},
			Bidi:    false,
		},
		"CodingDraft",
		"CodingProblem",
	)
	graph.MustAddE(
		"drafts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   codingproblem.DraftsTable,
			Columns: []string{codingproblem.DraftsColumn},
			Bidi:    false,
		},
		"CodingProblem",
		"CodingDraft",
	)
	graph.MustAddE(
		"author",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingsubmission.AuthorTable,
			Columns: []string{codingsubmission.AuthorColumn},
			Bidi:    false,
		},
		"CodingSubmission",
		"User",
	)
	graph.MustAddE(
		"coding_problem",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingsubmission.CodingProblemTable,
			Columns: []string{codingsubmission.CodingProblemColumn},
			Bidi:    false,
		},
		"CodingSubmission",
		"CodingProblem",
	)
	graph.MustAddE(
		"drafts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.DraftsTable,
			Columns: []string{user.DraftsColumn},
			Bidi:    false,
		},
		"User",
		"CodingDraft",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cdq *CodingDraftQuery) addPredicate(pred func(s *sql.Selector)) {
	cdq.predicates = append(cdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CodingDraftQuery builder.
func (cdq *CodingDraftQuery) Filter() *CodingDraftFilter {
	return &CodingDraftFilter{cdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CodingDraftMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CodingDraftMutation builder.
func (m *CodingDraftMutation) Filter() *CodingDraftFilter {
	return &CodingDraftFilter{m}
}

// CodingDraftFilter provides a generic filtering capability at runtime for CodingDraftQuery.
type CodingDraftFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CodingDraftFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CodingDraftFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(codingdraft.FieldID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CodingDraftFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(codingdraft.FieldCode))
}

// WhereHasAuthor applies a predicate to check if query has an edge author.
func (f *CodingDraftFilter) WhereHasAuthor() {
	f.Where(entql.HasEdge("author"))
}

// WhereHasAuthorWith applies a predicate to check if query has an edge author with a given conditions (other predicates).
func (f *CodingDraftFilter) WhereHasAuthorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("author", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCodingProblem applies a predicate to check if query has an edge coding_problem.
func (f *CodingDraftFilter) WhereHasCodingProblem() {
	f.Where(entql.HasEdge("coding_problem"))
}

// WhereHasCodingProblemWith applies a predicate to check if query has an edge coding_problem with a given conditions (other predicates).
func (f *CodingDraftFilter) WhereHasCodingProblemWith(preds ...predicate.CodingProblem) {
	f.Where(entql.HasEdgeWith("coding_problem", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cpq *CodingProblemQuery) addPredicate(pred func(s *sql.Selector)) {
	cpq.predicates = append(cpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CodingProblemQuery builder.
func (cpq *CodingProblemQuery) Filter() *CodingProblemFilter {
	return &CodingProblemFilter{cpq}
}

// addPredicate implements the predicateAdder interface.
func (m *CodingProblemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CodingProblemMutation builder.
func (m *CodingProblemMutation) Filter() *CodingProblemFilter {
	return &CodingProblemFilter{m}
}

// CodingProblemFilter provides a generic filtering capability at runtime for CodingProblemQuery.
type CodingProblemFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CodingProblemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CodingProblemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(codingproblem.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *CodingProblemFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(codingproblem.FieldName))
}

// WhereStatement applies the entql string predicate on the statement field.
func (f *CodingProblemFilter) WhereStatement(p entql.StringP) {
	f.Where(p.Field(codingproblem.FieldStatement))
}

// WhereReleased applies the entql bool predicate on the released field.
func (f *CodingProblemFilter) WhereReleased(p entql.BoolP) {
	f.Where(p.Field(codingproblem.FieldReleased))
}

// WhereHasDrafts applies a predicate to check if query has an edge drafts.
func (f *CodingProblemFilter) WhereHasDrafts() {
	f.Where(entql.HasEdge("drafts"))
}

// WhereHasDraftsWith applies a predicate to check if query has an edge drafts with a given conditions (other predicates).
func (f *CodingProblemFilter) WhereHasDraftsWith(preds ...predicate.CodingDraft) {
	f.Where(entql.HasEdgeWith("drafts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csq *CodingSubmissionQuery) addPredicate(pred func(s *sql.Selector)) {
	csq.predicates = append(csq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CodingSubmissionQuery builder.
func (csq *CodingSubmissionQuery) Filter() *CodingSubmissionFilter {
	return &CodingSubmissionFilter{csq}
}

// addPredicate implements the predicateAdder interface.
func (m *CodingSubmissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CodingSubmissionMutation builder.
func (m *CodingSubmissionMutation) Filter() *CodingSubmissionFilter {
	return &CodingSubmissionFilter{m}
}

// CodingSubmissionFilter provides a generic filtering capability at runtime for CodingSubmissionQuery.
type CodingSubmissionFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CodingSubmissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CodingSubmissionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(codingsubmission.FieldID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CodingSubmissionFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(codingsubmission.FieldCode))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *CodingSubmissionFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(codingsubmission.FieldStatus))
}

// WhereHasAuthor applies a predicate to check if query has an edge author.
func (f *CodingSubmissionFilter) WhereHasAuthor() {
	f.Where(entql.HasEdge("author"))
}

// WhereHasAuthorWith applies a predicate to check if query has an edge author with a given conditions (other predicates).
func (f *CodingSubmissionFilter) WhereHasAuthorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("author", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCodingProblem applies a predicate to check if query has an edge coding_problem.
func (f *CodingSubmissionFilter) WhereHasCodingProblem() {
	f.Where(entql.HasEdge("coding_problem"))
}

// WhereHasCodingProblemWith applies a predicate to check if query has an edge coding_problem with a given conditions (other predicates).
func (f *CodingSubmissionFilter) WhereHasCodingProblemWith(preds ...predicate.CodingProblem) {
	f.Where(entql.HasEdgeWith("coding_problem", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereIsStaff applies the entql bool predicate on the is_staff field.
func (f *UserFilter) WhereIsStaff(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsStaff))
}

// WhereHasDrafts applies a predicate to check if query has an edge drafts.
func (f *UserFilter) WhereHasDrafts() {
	f.Where(entql.HasEdge("drafts"))
}

// WhereHasDraftsWith applies a predicate to check if query has an edge drafts with a given conditions (other predicates).
func (f *UserFilter) WhereHasDraftsWith(preds ...predicate.CodingDraft) {
	f.Where(entql.HasEdgeWith("drafts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
