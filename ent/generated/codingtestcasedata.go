// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingtestcase"
	"170-ag/ent/generated/codingtestcasedata"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CodingTestCaseData is the model entity for the CodingTestCaseData schema.
type CodingTestCaseData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Input holds the value of the "input" field.
	Input string `json:"input,omitempty"`
	// Output holds the value of the "output" field.
	Output string `json:"output,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CodingTestCaseDataQuery when eager-loading is set.
	Edges CodingTestCaseDataEdges `json:"edges"`
}

// CodingTestCaseDataEdges holds the relations/edges for other nodes in the graph.
type CodingTestCaseDataEdges struct {
	// TestCase holds the value of the test_case edge.
	TestCase *CodingTestCase `json:"test_case,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestCaseOrErr returns the TestCase value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CodingTestCaseDataEdges) TestCaseOrErr() (*CodingTestCase, error) {
	if e.loadedTypes[0] {
		if e.TestCase == nil {
			// The edge test_case was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: codingtestcase.Label}
		}
		return e.TestCase, nil
	}
	return nil, &NotLoadedError{edge: "test_case"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CodingTestCaseData) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case codingtestcasedata.FieldID:
			values[i] = new(sql.NullInt64)
		case codingtestcasedata.FieldInput, codingtestcasedata.FieldOutput:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CodingTestCaseData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CodingTestCaseData fields.
func (ctcd *CodingTestCaseData) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case codingtestcasedata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ctcd.ID = int(value.Int64)
		case codingtestcasedata.FieldInput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value.Valid {
				ctcd.Input = value.String
			}
		case codingtestcasedata.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				ctcd.Output = value.String
			}
		}
	}
	return nil
}

// QueryTestCase queries the "test_case" edge of the CodingTestCaseData entity.
func (ctcd *CodingTestCaseData) QueryTestCase() *CodingTestCaseQuery {
	return (&CodingTestCaseDataClient{config: ctcd.config}).QueryTestCase(ctcd)
}

// Update returns a builder for updating this CodingTestCaseData.
// Note that you need to call CodingTestCaseData.Unwrap() before calling this method if this CodingTestCaseData
// was returned from a transaction, and the transaction was committed or rolled back.
func (ctcd *CodingTestCaseData) Update() *CodingTestCaseDataUpdateOne {
	return (&CodingTestCaseDataClient{config: ctcd.config}).UpdateOne(ctcd)
}

// Unwrap unwraps the CodingTestCaseData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ctcd *CodingTestCaseData) Unwrap() *CodingTestCaseData {
	tx, ok := ctcd.config.driver.(*txDriver)
	if !ok {
		panic("generated: CodingTestCaseData is not a transactional entity")
	}
	ctcd.config.driver = tx.drv
	return ctcd
}

// String implements the fmt.Stringer.
func (ctcd *CodingTestCaseData) String() string {
	var builder strings.Builder
	builder.WriteString("CodingTestCaseData(")
	builder.WriteString(fmt.Sprintf("id=%v", ctcd.ID))
	builder.WriteString(", input=")
	builder.WriteString(ctcd.Input)
	builder.WriteString(", output=")
	builder.WriteString(ctcd.Output)
	builder.WriteByte(')')
	return builder.String()
}

// CodingTestCaseDataSlice is a parsable slice of CodingTestCaseData.
type CodingTestCaseDataSlice []*CodingTestCaseData

func (ctcd CodingTestCaseDataSlice) config(cfg config) {
	for _i := range ctcd {
		ctcd[_i].config = cfg
	}
}
