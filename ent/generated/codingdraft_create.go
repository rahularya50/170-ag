// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingdraft"
	"170-ag/ent/generated/codingproblem"
	"170-ag/ent/generated/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingDraftCreate is the builder for creating a CodingDraft entity.
type CodingDraftCreate struct {
	config
	mutation *CodingDraftMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (cdc *CodingDraftCreate) SetCode(s string) *CodingDraftCreate {
	cdc.mutation.SetCode(s)
	return cdc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (cdc *CodingDraftCreate) SetAuthorID(id int) *CodingDraftCreate {
	cdc.mutation.SetAuthorID(id)
	return cdc
}

// SetAuthor sets the "author" edge to the User entity.
func (cdc *CodingDraftCreate) SetAuthor(u *User) *CodingDraftCreate {
	return cdc.SetAuthorID(u.ID)
}

// SetCodingProblemID sets the "coding_problem" edge to the CodingProblem entity by ID.
func (cdc *CodingDraftCreate) SetCodingProblemID(id int) *CodingDraftCreate {
	cdc.mutation.SetCodingProblemID(id)
	return cdc
}

// SetCodingProblem sets the "coding_problem" edge to the CodingProblem entity.
func (cdc *CodingDraftCreate) SetCodingProblem(c *CodingProblem) *CodingDraftCreate {
	return cdc.SetCodingProblemID(c.ID)
}

// Mutation returns the CodingDraftMutation object of the builder.
func (cdc *CodingDraftCreate) Mutation() *CodingDraftMutation {
	return cdc.mutation
}

// Save creates the CodingDraft in the database.
func (cdc *CodingDraftCreate) Save(ctx context.Context) (*CodingDraft, error) {
	var (
		err  error
		node *CodingDraft
	)
	if len(cdc.hooks) == 0 {
		if err = cdc.check(); err != nil {
			return nil, err
		}
		node, err = cdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingDraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cdc.check(); err != nil {
				return nil, err
			}
			cdc.mutation = mutation
			if node, err = cdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cdc.hooks) - 1; i >= 0; i-- {
			if cdc.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *CodingDraftCreate) SaveX(ctx context.Context) *CodingDraft {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *CodingDraftCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *CodingDraftCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdc *CodingDraftCreate) check() error {
	if _, ok := cdc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`generated: missing required field "CodingDraft.code"`)}
	}
	if _, ok := cdc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`generated: missing required edge "CodingDraft.author"`)}
	}
	if _, ok := cdc.mutation.CodingProblemID(); !ok {
		return &ValidationError{Name: "coding_problem", err: errors.New(`generated: missing required edge "CodingDraft.coding_problem"`)}
	}
	return nil
}

func (cdc *CodingDraftCreate) sqlSave(ctx context.Context) (*CodingDraft, error) {
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cdc *CodingDraftCreate) createSpec() (*CodingDraft, *sqlgraph.CreateSpec) {
	var (
		_node = &CodingDraft{config: cdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: codingdraft.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingdraft.FieldID,
			},
		}
	)
	_spec.OnConflict = cdc.conflict
	if value, ok := cdc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingdraft.FieldCode,
		})
		_node.Code = value
	}
	if nodes := cdc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.AuthorTable,
			Columns: []string{codingdraft.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coding_draft_author = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.CodingProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingdraft.CodingProblemTable,
			Columns: []string{codingdraft.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.coding_draft_coding_problem = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingDraft.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingDraftUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
//
func (cdc *CodingDraftCreate) OnConflict(opts ...sql.ConflictOption) *CodingDraftUpsertOne {
	cdc.conflict = opts
	return &CodingDraftUpsertOne{
		create: cdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingDraft.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cdc *CodingDraftCreate) OnConflictColumns(columns ...string) *CodingDraftUpsertOne {
	cdc.conflict = append(cdc.conflict, sql.ConflictColumns(columns...))
	return &CodingDraftUpsertOne{
		create: cdc,
	}
}

type (
	// CodingDraftUpsertOne is the builder for "upsert"-ing
	//  one CodingDraft node.
	CodingDraftUpsertOne struct {
		create *CodingDraftCreate
	}

	// CodingDraftUpsert is the "OnConflict" setter.
	CodingDraftUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *CodingDraftUpsert) SetCode(v string) *CodingDraftUpsert {
	u.Set(codingdraft.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CodingDraftUpsert) UpdateCode() *CodingDraftUpsert {
	u.SetExcluded(codingdraft.FieldCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CodingDraft.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingDraftUpsertOne) UpdateNewValues() *CodingDraftUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CodingDraft.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CodingDraftUpsertOne) Ignore() *CodingDraftUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingDraftUpsertOne) DoNothing() *CodingDraftUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingDraftCreate.OnConflict
// documentation for more info.
func (u *CodingDraftUpsertOne) Update(set func(*CodingDraftUpsert)) *CodingDraftUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingDraftUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *CodingDraftUpsertOne) SetCode(v string) *CodingDraftUpsertOne {
	return u.Update(func(s *CodingDraftUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CodingDraftUpsertOne) UpdateCode() *CodingDraftUpsertOne {
	return u.Update(func(s *CodingDraftUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *CodingDraftUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingDraftCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingDraftUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CodingDraftUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CodingDraftUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CodingDraftCreateBulk is the builder for creating many CodingDraft entities in bulk.
type CodingDraftCreateBulk struct {
	config
	builders []*CodingDraftCreate
	conflict []sql.ConflictOption
}

// Save creates the CodingDraft entities in the database.
func (cdcb *CodingDraftCreateBulk) Save(ctx context.Context) ([]*CodingDraft, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*CodingDraft, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodingDraftMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *CodingDraftCreateBulk) SaveX(ctx context.Context) []*CodingDraft {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *CodingDraftCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *CodingDraftCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingDraft.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingDraftUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
//
func (cdcb *CodingDraftCreateBulk) OnConflict(opts ...sql.ConflictOption) *CodingDraftUpsertBulk {
	cdcb.conflict = opts
	return &CodingDraftUpsertBulk{
		create: cdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingDraft.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cdcb *CodingDraftCreateBulk) OnConflictColumns(columns ...string) *CodingDraftUpsertBulk {
	cdcb.conflict = append(cdcb.conflict, sql.ConflictColumns(columns...))
	return &CodingDraftUpsertBulk{
		create: cdcb,
	}
}

// CodingDraftUpsertBulk is the builder for "upsert"-ing
// a bulk of CodingDraft nodes.
type CodingDraftUpsertBulk struct {
	create *CodingDraftCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CodingDraft.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingDraftUpsertBulk) UpdateNewValues() *CodingDraftUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CodingDraft.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CodingDraftUpsertBulk) Ignore() *CodingDraftUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingDraftUpsertBulk) DoNothing() *CodingDraftUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingDraftCreateBulk.OnConflict
// documentation for more info.
func (u *CodingDraftUpsertBulk) Update(set func(*CodingDraftUpsert)) *CodingDraftUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingDraftUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *CodingDraftUpsertBulk) SetCode(v string) *CodingDraftUpsertBulk {
	return u.Update(func(s *CodingDraftUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CodingDraftUpsertBulk) UpdateCode() *CodingDraftUpsertBulk {
	return u.Update(func(s *CodingDraftUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *CodingDraftUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CodingDraftCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingDraftCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingDraftUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
