// Code generated by entc, DO NOT EDIT.

package codingsubmission

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the codingsubmission type in the database.
	Label = "coding_submission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResults holds the string denoting the results field in the database.
	FieldResults = "results"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeCodingProblem holds the string denoting the coding_problem edge name in mutations.
	EdgeCodingProblem = "coding_problem"
	// EdgeStaffData holds the string denoting the staff_data edge name in mutations.
	EdgeStaffData = "staff_data"
	// Table holds the table name of the codingsubmission in the database.
	Table = "coding_submissions"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "coding_submissions"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "coding_submission_author"
	// CodingProblemTable is the table that holds the coding_problem relation/edge.
	CodingProblemTable = "coding_submissions"
	// CodingProblemInverseTable is the table name for the CodingProblem entity.
	// It exists in this package in order to avoid circular dependency with the "codingproblem" package.
	CodingProblemInverseTable = "coding_problems"
	// CodingProblemColumn is the table column denoting the coding_problem relation/edge.
	CodingProblemColumn = "coding_submission_coding_problem"
	// StaffDataTable is the table that holds the staff_data relation/edge.
	StaffDataTable = "coding_submissions"
	// StaffDataInverseTable is the table name for the CodingSubmissionStaffData entity.
	// It exists in this package in order to avoid circular dependency with the "codingsubmissionstaffdata" package.
	StaffDataInverseTable = "coding_submission_staff_data"
	// StaffDataColumn is the table column denoting the staff_data relation/edge.
	StaffDataColumn = "coding_submission_staff_data_coding_submission"
)

// Columns holds all SQL columns for codingsubmission fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCode,
	FieldStatus,
	FieldResults,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "coding_submissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"coding_submission_author",
	"coding_submission_coding_problem",
	"coding_submission_staff_data_coding_submission",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "170-ag/ent/generated/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusQueued is the default value of the Status enum.
const DefaultStatus = StatusQueued

// Status values.
const (
	StatusQueued    Status = "QUEUED"
	StatusRunning   Status = "RUNNING"
	StatusCompleted Status = "COMPLETED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusQueued, StatusRunning, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("codingsubmission: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (s Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(s.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (s *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*s = Status(str)
	if err := StatusValidator(*s); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
