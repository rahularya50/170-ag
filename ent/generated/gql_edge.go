// Code generated by entc, DO NOT EDIT.

package generated

import "context"

func (cd *CodingDraft) Author(ctx context.Context) (*User, error) {
	result, err := cd.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryAuthor().Only(ctx)
	}
	return result, err
}

func (cd *CodingDraft) CodingProblem(ctx context.Context) (*CodingProblem, error) {
	result, err := cd.Edges.CodingProblemOrErr()
	if IsNotLoaded(err) {
		result, err = cd.QueryCodingProblem().Only(ctx)
	}
	return result, err
}

func (cp *CodingProblem) Drafts(ctx context.Context) ([]*CodingDraft, error) {
	result, err := cp.Edges.DraftsOrErr()
	if IsNotLoaded(err) {
		result, err = cp.QueryDrafts().All(ctx)
	}
	return result, err
}

func (cp *CodingProblem) TestCases(ctx context.Context) ([]*CodingTestCase, error) {
	result, err := cp.Edges.TestCasesOrErr()
	if IsNotLoaded(err) {
		result, err = cp.QueryTestCases().All(ctx)
	}
	return result, err
}

func (cp *CodingProblem) Submissions(ctx context.Context) ([]*CodingSubmission, error) {
	result, err := cp.Edges.SubmissionsOrErr()
	if IsNotLoaded(err) {
		result, err = cp.QuerySubmissions().All(ctx)
	}
	return result, err
}

func (cs *CodingSubmission) Author(ctx context.Context) (*User, error) {
	result, err := cs.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryAuthor().Only(ctx)
	}
	return result, err
}

func (cs *CodingSubmission) CodingProblem(ctx context.Context) (*CodingProblem, error) {
	result, err := cs.Edges.CodingProblemOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryCodingProblem().Only(ctx)
	}
	return result, err
}

func (cs *CodingSubmission) StaffData(ctx context.Context) (*CodingSubmissionStaffData, error) {
	result, err := cs.Edges.StaffDataOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryStaffData().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cssd *CodingSubmissionStaffData) CodingSubmission(ctx context.Context) (*CodingSubmission, error) {
	result, err := cssd.Edges.CodingSubmissionOrErr()
	if IsNotLoaded(err) {
		result, err = cssd.QueryCodingSubmission().Only(ctx)
	}
	return result, err
}

func (ctc *CodingTestCase) CodingProblem(ctx context.Context) (*CodingProblem, error) {
	result, err := ctc.Edges.CodingProblemOrErr()
	if IsNotLoaded(err) {
		result, err = ctc.QueryCodingProblem().Only(ctx)
	}
	return result, err
}

func (ctc *CodingTestCase) Data(ctx context.Context) (*CodingTestCaseData, error) {
	result, err := ctc.Edges.DataOrErr()
	if IsNotLoaded(err) {
		result, err = ctc.QueryData().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ctcd *CodingTestCaseData) TestCase(ctx context.Context) (*CodingTestCase, error) {
	result, err := ctcd.Edges.TestCaseOrErr()
	if IsNotLoaded(err) {
		result, err = ctcd.QueryTestCase().Only(ctx)
	}
	return result, err
}

func (u *User) Drafts(ctx context.Context) ([]*CodingDraft, error) {
	result, err := u.Edges.DraftsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryDrafts().All(ctx)
	}
	return result, err
}
