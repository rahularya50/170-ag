// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingsubmission"
	"170-ag/ent/generated/codingsubmissionstaffdata"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CodingSubmissionStaffData is the model entity for the CodingSubmissionStaffData schema.
type CodingSubmissionStaffData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExecutionID holds the value of the "execution_id" field.
	ExecutionID *int64 `json:"execution_id,omitempty"`
	// Input holds the value of the "input" field.
	Input string `json:"input,omitempty"`
	// Output holds the value of the "output" field.
	Output *string `json:"output,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CodingSubmissionStaffDataQuery when eager-loading is set.
	Edges CodingSubmissionStaffDataEdges `json:"edges"`
}

// CodingSubmissionStaffDataEdges holds the relations/edges for other nodes in the graph.
type CodingSubmissionStaffDataEdges struct {
	// CodingSubmission holds the value of the coding_submission edge.
	CodingSubmission *CodingSubmission `json:"coding_submission,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CodingSubmissionOrErr returns the CodingSubmission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CodingSubmissionStaffDataEdges) CodingSubmissionOrErr() (*CodingSubmission, error) {
	if e.loadedTypes[0] {
		if e.CodingSubmission == nil {
			// The edge coding_submission was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: codingsubmission.Label}
		}
		return e.CodingSubmission, nil
	}
	return nil, &NotLoadedError{edge: "coding_submission"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CodingSubmissionStaffData) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case codingsubmissionstaffdata.FieldID, codingsubmissionstaffdata.FieldExecutionID:
			values[i] = new(sql.NullInt64)
		case codingsubmissionstaffdata.FieldInput, codingsubmissionstaffdata.FieldOutput:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CodingSubmissionStaffData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CodingSubmissionStaffData fields.
func (cssd *CodingSubmissionStaffData) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case codingsubmissionstaffdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cssd.ID = int(value.Int64)
		case codingsubmissionstaffdata.FieldExecutionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execution_id", values[i])
			} else if value.Valid {
				cssd.ExecutionID = new(int64)
				*cssd.ExecutionID = value.Int64
			}
		case codingsubmissionstaffdata.FieldInput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value.Valid {
				cssd.Input = value.String
			}
		case codingsubmissionstaffdata.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				cssd.Output = new(string)
				*cssd.Output = value.String
			}
		}
	}
	return nil
}

// QueryCodingSubmission queries the "coding_submission" edge of the CodingSubmissionStaffData entity.
func (cssd *CodingSubmissionStaffData) QueryCodingSubmission() *CodingSubmissionQuery {
	return (&CodingSubmissionStaffDataClient{config: cssd.config}).QueryCodingSubmission(cssd)
}

// Update returns a builder for updating this CodingSubmissionStaffData.
// Note that you need to call CodingSubmissionStaffData.Unwrap() before calling this method if this CodingSubmissionStaffData
// was returned from a transaction, and the transaction was committed or rolled back.
func (cssd *CodingSubmissionStaffData) Update() *CodingSubmissionStaffDataUpdateOne {
	return (&CodingSubmissionStaffDataClient{config: cssd.config}).UpdateOne(cssd)
}

// Unwrap unwraps the CodingSubmissionStaffData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cssd *CodingSubmissionStaffData) Unwrap() *CodingSubmissionStaffData {
	tx, ok := cssd.config.driver.(*txDriver)
	if !ok {
		panic("generated: CodingSubmissionStaffData is not a transactional entity")
	}
	cssd.config.driver = tx.drv
	return cssd
}

// String implements the fmt.Stringer.
func (cssd *CodingSubmissionStaffData) String() string {
	var builder strings.Builder
	builder.WriteString("CodingSubmissionStaffData(")
	builder.WriteString(fmt.Sprintf("id=%v", cssd.ID))
	if v := cssd.ExecutionID; v != nil {
		builder.WriteString(", execution_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", input=")
	builder.WriteString(cssd.Input)
	if v := cssd.Output; v != nil {
		builder.WriteString(", output=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// CodingSubmissionStaffDataSlice is a parsable slice of CodingSubmissionStaffData.
type CodingSubmissionStaffDataSlice []*CodingSubmissionStaffData

func (cssd CodingSubmissionStaffDataSlice) config(cfg config) {
	for _i := range cssd {
		cssd[_i].config = cfg
	}
}
