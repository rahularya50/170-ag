// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/projectscore"
	"170-ag/ent/generated/projectteam"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProjectScore is the model entity for the ProjectScore schema.
type ProjectScore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// CaseID holds the value of the "case_id" field.
	CaseID int32 `json:"case_id,omitempty"`
	// Score holds the value of the "score" field.
	Score float64 `json:"score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectScoreQuery when eager-loading is set.
	Edges               ProjectScoreEdges `json:"edges"`
	project_team_scores *int
}

// ProjectScoreEdges holds the relations/edges for other nodes in the graph.
type ProjectScoreEdges struct {
	// Team holds the value of the team edge.
	Team *ProjectTeam `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectScoreEdges) TeamOrErr() (*ProjectTeam, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// The edge team was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: projectteam.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectScore) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectscore.FieldScore:
			values[i] = new(sql.NullFloat64)
		case projectscore.FieldID, projectscore.FieldCaseID:
			values[i] = new(sql.NullInt64)
		case projectscore.FieldCreateTime, projectscore.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case projectscore.ForeignKeys[0]: // project_team_scores
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectScore", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectScore fields.
func (ps *ProjectScore) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectscore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case projectscore.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ps.CreateTime = value.Time
			}
		case projectscore.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ps.UpdateTime = value.Time
			}
		case projectscore.FieldCaseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field case_id", values[i])
			} else if value.Valid {
				ps.CaseID = int32(value.Int64)
			}
		case projectscore.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				ps.Score = value.Float64
			}
		case projectscore.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_team_scores", value)
			} else if value.Valid {
				ps.project_team_scores = new(int)
				*ps.project_team_scores = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTeam queries the "team" edge of the ProjectScore entity.
func (ps *ProjectScore) QueryTeam() *ProjectTeamQuery {
	return (&ProjectScoreClient{config: ps.config}).QueryTeam(ps)
}

// Update returns a builder for updating this ProjectScore.
// Note that you need to call ProjectScore.Unwrap() before calling this method if this ProjectScore
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProjectScore) Update() *ProjectScoreUpdateOne {
	return (&ProjectScoreClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the ProjectScore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProjectScore) Unwrap() *ProjectScore {
	tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProjectScore is not a transactional entity")
	}
	ps.config.driver = tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProjectScore) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectScore(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ps.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ps.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", case_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.CaseID))
	builder.WriteString(", score=")
	builder.WriteString(fmt.Sprintf("%v", ps.Score))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectScores is a parsable slice of ProjectScore.
type ProjectScores []*ProjectScore

func (ps ProjectScores) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
