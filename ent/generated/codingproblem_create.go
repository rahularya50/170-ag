// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingdraft"
	"170-ag/ent/generated/codingproblem"
	"170-ag/ent/generated/codingsubmission"
	"170-ag/ent/generated/codingtestcase"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingProblemCreate is the builder for creating a CodingProblem entity.
type CodingProblemCreate struct {
	config
	mutation *CodingProblemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cpc *CodingProblemCreate) SetCreateTime(t time.Time) *CodingProblemCreate {
	cpc.mutation.SetCreateTime(t)
	return cpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cpc *CodingProblemCreate) SetNillableCreateTime(t *time.Time) *CodingProblemCreate {
	if t != nil {
		cpc.SetCreateTime(*t)
	}
	return cpc
}

// SetUpdateTime sets the "update_time" field.
func (cpc *CodingProblemCreate) SetUpdateTime(t time.Time) *CodingProblemCreate {
	cpc.mutation.SetUpdateTime(t)
	return cpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cpc *CodingProblemCreate) SetNillableUpdateTime(t *time.Time) *CodingProblemCreate {
	if t != nil {
		cpc.SetUpdateTime(*t)
	}
	return cpc
}

// SetName sets the "name" field.
func (cpc *CodingProblemCreate) SetName(s string) *CodingProblemCreate {
	cpc.mutation.SetName(s)
	return cpc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cpc *CodingProblemCreate) SetNillableName(s *string) *CodingProblemCreate {
	if s != nil {
		cpc.SetName(*s)
	}
	return cpc
}

// SetStatement sets the "statement" field.
func (cpc *CodingProblemCreate) SetStatement(s string) *CodingProblemCreate {
	cpc.mutation.SetStatement(s)
	return cpc
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (cpc *CodingProblemCreate) SetNillableStatement(s *string) *CodingProblemCreate {
	if s != nil {
		cpc.SetStatement(*s)
	}
	return cpc
}

// SetSkeleton sets the "skeleton" field.
func (cpc *CodingProblemCreate) SetSkeleton(s string) *CodingProblemCreate {
	cpc.mutation.SetSkeleton(s)
	return cpc
}

// SetNillableSkeleton sets the "skeleton" field if the given value is not nil.
func (cpc *CodingProblemCreate) SetNillableSkeleton(s *string) *CodingProblemCreate {
	if s != nil {
		cpc.SetSkeleton(*s)
	}
	return cpc
}

// SetReleased sets the "released" field.
func (cpc *CodingProblemCreate) SetReleased(b bool) *CodingProblemCreate {
	cpc.mutation.SetReleased(b)
	return cpc
}

// SetNillableReleased sets the "released" field if the given value is not nil.
func (cpc *CodingProblemCreate) SetNillableReleased(b *bool) *CodingProblemCreate {
	if b != nil {
		cpc.SetReleased(*b)
	}
	return cpc
}

// SetDeadline sets the "deadline" field.
func (cpc *CodingProblemCreate) SetDeadline(t time.Time) *CodingProblemCreate {
	cpc.mutation.SetDeadline(t)
	return cpc
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (cpc *CodingProblemCreate) SetNillableDeadline(t *time.Time) *CodingProblemCreate {
	if t != nil {
		cpc.SetDeadline(*t)
	}
	return cpc
}

// AddDraftIDs adds the "drafts" edge to the CodingDraft entity by IDs.
func (cpc *CodingProblemCreate) AddDraftIDs(ids ...int) *CodingProblemCreate {
	cpc.mutation.AddDraftIDs(ids...)
	return cpc
}

// AddDrafts adds the "drafts" edges to the CodingDraft entity.
func (cpc *CodingProblemCreate) AddDrafts(c ...*CodingDraft) *CodingProblemCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpc.AddDraftIDs(ids...)
}

// AddTestCaseIDs adds the "test_cases" edge to the CodingTestCase entity by IDs.
func (cpc *CodingProblemCreate) AddTestCaseIDs(ids ...int) *CodingProblemCreate {
	cpc.mutation.AddTestCaseIDs(ids...)
	return cpc
}

// AddTestCases adds the "test_cases" edges to the CodingTestCase entity.
func (cpc *CodingProblemCreate) AddTestCases(c ...*CodingTestCase) *CodingProblemCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpc.AddTestCaseIDs(ids...)
}

// AddSubmissionIDs adds the "submissions" edge to the CodingSubmission entity by IDs.
func (cpc *CodingProblemCreate) AddSubmissionIDs(ids ...int) *CodingProblemCreate {
	cpc.mutation.AddSubmissionIDs(ids...)
	return cpc
}

// AddSubmissions adds the "submissions" edges to the CodingSubmission entity.
func (cpc *CodingProblemCreate) AddSubmissions(c ...*CodingSubmission) *CodingProblemCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpc.AddSubmissionIDs(ids...)
}

// Mutation returns the CodingProblemMutation object of the builder.
func (cpc *CodingProblemCreate) Mutation() *CodingProblemMutation {
	return cpc.mutation
}

// Save creates the CodingProblem in the database.
func (cpc *CodingProblemCreate) Save(ctx context.Context) (*CodingProblem, error) {
	var (
		err  error
		node *CodingProblem
	)
	if err := cpc.defaults(); err != nil {
		return nil, err
	}
	if len(cpc.hooks) == 0 {
		if err = cpc.check(); err != nil {
			return nil, err
		}
		node, err = cpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingProblemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpc.check(); err != nil {
				return nil, err
			}
			cpc.mutation = mutation
			if node, err = cpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cpc.hooks) - 1; i >= 0; i-- {
			if cpc.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CodingProblemCreate) SaveX(ctx context.Context) *CodingProblem {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CodingProblemCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CodingProblemCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CodingProblemCreate) defaults() error {
	if _, ok := cpc.mutation.CreateTime(); !ok {
		if codingproblem.DefaultCreateTime == nil {
			return fmt.Errorf("generated: uninitialized codingproblem.DefaultCreateTime (forgotten import generated/runtime?)")
		}
		v := codingproblem.DefaultCreateTime()
		cpc.mutation.SetCreateTime(v)
	}
	if _, ok := cpc.mutation.UpdateTime(); !ok {
		if codingproblem.DefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingproblem.DefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingproblem.DefaultUpdateTime()
		cpc.mutation.SetUpdateTime(v)
	}
	if _, ok := cpc.mutation.Name(); !ok {
		v := codingproblem.DefaultName
		cpc.mutation.SetName(v)
	}
	if _, ok := cpc.mutation.Statement(); !ok {
		v := codingproblem.DefaultStatement
		cpc.mutation.SetStatement(v)
	}
	if _, ok := cpc.mutation.Skeleton(); !ok {
		v := codingproblem.DefaultSkeleton
		cpc.mutation.SetSkeleton(v)
	}
	if _, ok := cpc.mutation.Released(); !ok {
		v := codingproblem.DefaultReleased
		cpc.mutation.SetReleased(v)
	}
	if _, ok := cpc.mutation.Deadline(); !ok {
		if codingproblem.DefaultDeadline == nil {
			return fmt.Errorf("generated: uninitialized codingproblem.DefaultDeadline (forgotten import generated/runtime?)")
		}
		v := codingproblem.DefaultDeadline()
		cpc.mutation.SetDeadline(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CodingProblemCreate) check() error {
	if _, ok := cpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "CodingProblem.create_time"`)}
	}
	if _, ok := cpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "CodingProblem.update_time"`)}
	}
	if _, ok := cpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "CodingProblem.name"`)}
	}
	if v, ok := cpc.mutation.Name(); ok {
		if err := codingproblem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "CodingProblem.name": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`generated: missing required field "CodingProblem.statement"`)}
	}
	if v, ok := cpc.mutation.Statement(); ok {
		if err := codingproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`generated: validator failed for field "CodingProblem.statement": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.Skeleton(); !ok {
		return &ValidationError{Name: "skeleton", err: errors.New(`generated: missing required field "CodingProblem.skeleton"`)}
	}
	if _, ok := cpc.mutation.Released(); !ok {
		return &ValidationError{Name: "released", err: errors.New(`generated: missing required field "CodingProblem.released"`)}
	}
	if _, ok := cpc.mutation.Deadline(); !ok {
		return &ValidationError{Name: "deadline", err: errors.New(`generated: missing required field "CodingProblem.deadline"`)}
	}
	return nil
}

func (cpc *CodingProblemCreate) sqlSave(ctx context.Context) (*CodingProblem, error) {
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cpc *CodingProblemCreate) createSpec() (*CodingProblem, *sqlgraph.CreateSpec) {
	var (
		_node = &CodingProblem{config: cpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: codingproblem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingproblem.FieldID,
			},
		}
	)
	_spec.OnConflict = cpc.conflict
	if value, ok := cpc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingproblem.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cpc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingproblem.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingproblem.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cpc.mutation.Statement(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingproblem.FieldStatement,
		})
		_node.Statement = value
	}
	if value, ok := cpc.mutation.Skeleton(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingproblem.FieldSkeleton,
		})
		_node.Skeleton = value
	}
	if value, ok := cpc.mutation.Released(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: codingproblem.FieldReleased,
		})
		_node.Released = value
	}
	if value, ok := cpc.mutation.Deadline(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingproblem.FieldDeadline,
		})
		_node.Deadline = value
	}
	if nodes := cpc.mutation.DraftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   codingproblem.DraftsTable,
			Columns: []string{codingproblem.DraftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingdraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.TestCasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   codingproblem.TestCasesTable,
			Columns: []string{codingproblem.TestCasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingtestcase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   codingproblem.SubmissionsTable,
			Columns: []string{codingproblem.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingsubmission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingProblem.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingProblemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (cpc *CodingProblemCreate) OnConflict(opts ...sql.ConflictOption) *CodingProblemUpsertOne {
	cpc.conflict = opts
	return &CodingProblemUpsertOne{
		create: cpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingProblem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cpc *CodingProblemCreate) OnConflictColumns(columns ...string) *CodingProblemUpsertOne {
	cpc.conflict = append(cpc.conflict, sql.ConflictColumns(columns...))
	return &CodingProblemUpsertOne{
		create: cpc,
	}
}

type (
	// CodingProblemUpsertOne is the builder for "upsert"-ing
	//  one CodingProblem node.
	CodingProblemUpsertOne struct {
		create *CodingProblemCreate
	}

	// CodingProblemUpsert is the "OnConflict" setter.
	CodingProblemUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *CodingProblemUpsert) SetCreateTime(v time.Time) *CodingProblemUpsert {
	u.Set(codingproblem.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingProblemUpsert) UpdateCreateTime() *CodingProblemUpsert {
	u.SetExcluded(codingproblem.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingProblemUpsert) SetUpdateTime(v time.Time) *CodingProblemUpsert {
	u.Set(codingproblem.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingProblemUpsert) UpdateUpdateTime() *CodingProblemUpsert {
	u.SetExcluded(codingproblem.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *CodingProblemUpsert) SetName(v string) *CodingProblemUpsert {
	u.Set(codingproblem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CodingProblemUpsert) UpdateName() *CodingProblemUpsert {
	u.SetExcluded(codingproblem.FieldName)
	return u
}

// SetStatement sets the "statement" field.
func (u *CodingProblemUpsert) SetStatement(v string) *CodingProblemUpsert {
	u.Set(codingproblem.FieldStatement, v)
	return u
}

// UpdateStatement sets the "statement" field to the value that was provided on create.
func (u *CodingProblemUpsert) UpdateStatement() *CodingProblemUpsert {
	u.SetExcluded(codingproblem.FieldStatement)
	return u
}

// SetSkeleton sets the "skeleton" field.
func (u *CodingProblemUpsert) SetSkeleton(v string) *CodingProblemUpsert {
	u.Set(codingproblem.FieldSkeleton, v)
	return u
}

// UpdateSkeleton sets the "skeleton" field to the value that was provided on create.
func (u *CodingProblemUpsert) UpdateSkeleton() *CodingProblemUpsert {
	u.SetExcluded(codingproblem.FieldSkeleton)
	return u
}

// SetReleased sets the "released" field.
func (u *CodingProblemUpsert) SetReleased(v bool) *CodingProblemUpsert {
	u.Set(codingproblem.FieldReleased, v)
	return u
}

// UpdateReleased sets the "released" field to the value that was provided on create.
func (u *CodingProblemUpsert) UpdateReleased() *CodingProblemUpsert {
	u.SetExcluded(codingproblem.FieldReleased)
	return u
}

// SetDeadline sets the "deadline" field.
func (u *CodingProblemUpsert) SetDeadline(v time.Time) *CodingProblemUpsert {
	u.Set(codingproblem.FieldDeadline, v)
	return u
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *CodingProblemUpsert) UpdateDeadline() *CodingProblemUpsert {
	u.SetExcluded(codingproblem.FieldDeadline)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CodingProblem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingProblemUpsertOne) UpdateNewValues() *CodingProblemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(codingproblem.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CodingProblem.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CodingProblemUpsertOne) Ignore() *CodingProblemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingProblemUpsertOne) DoNothing() *CodingProblemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingProblemCreate.OnConflict
// documentation for more info.
func (u *CodingProblemUpsertOne) Update(set func(*CodingProblemUpsert)) *CodingProblemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingProblemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *CodingProblemUpsertOne) SetCreateTime(v time.Time) *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingProblemUpsertOne) UpdateCreateTime() *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingProblemUpsertOne) SetUpdateTime(v time.Time) *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingProblemUpsertOne) UpdateUpdateTime() *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *CodingProblemUpsertOne) SetName(v string) *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CodingProblemUpsertOne) UpdateName() *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateName()
	})
}

// SetStatement sets the "statement" field.
func (u *CodingProblemUpsertOne) SetStatement(v string) *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetStatement(v)
	})
}

// UpdateStatement sets the "statement" field to the value that was provided on create.
func (u *CodingProblemUpsertOne) UpdateStatement() *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateStatement()
	})
}

// SetSkeleton sets the "skeleton" field.
func (u *CodingProblemUpsertOne) SetSkeleton(v string) *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetSkeleton(v)
	})
}

// UpdateSkeleton sets the "skeleton" field to the value that was provided on create.
func (u *CodingProblemUpsertOne) UpdateSkeleton() *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateSkeleton()
	})
}

// SetReleased sets the "released" field.
func (u *CodingProblemUpsertOne) SetReleased(v bool) *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetReleased(v)
	})
}

// UpdateReleased sets the "released" field to the value that was provided on create.
func (u *CodingProblemUpsertOne) UpdateReleased() *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateReleased()
	})
}

// SetDeadline sets the "deadline" field.
func (u *CodingProblemUpsertOne) SetDeadline(v time.Time) *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetDeadline(v)
	})
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *CodingProblemUpsertOne) UpdateDeadline() *CodingProblemUpsertOne {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateDeadline()
	})
}

// Exec executes the query.
func (u *CodingProblemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingProblemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingProblemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CodingProblemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CodingProblemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CodingProblemCreateBulk is the builder for creating many CodingProblem entities in bulk.
type CodingProblemCreateBulk struct {
	config
	builders []*CodingProblemCreate
	conflict []sql.ConflictOption
}

// Save creates the CodingProblem entities in the database.
func (cpcb *CodingProblemCreateBulk) Save(ctx context.Context) ([]*CodingProblem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CodingProblem, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodingProblemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CodingProblemCreateBulk) SaveX(ctx context.Context) []*CodingProblem {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CodingProblemCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CodingProblemCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodingProblem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodingProblemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (cpcb *CodingProblemCreateBulk) OnConflict(opts ...sql.ConflictOption) *CodingProblemUpsertBulk {
	cpcb.conflict = opts
	return &CodingProblemUpsertBulk{
		create: cpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodingProblem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cpcb *CodingProblemCreateBulk) OnConflictColumns(columns ...string) *CodingProblemUpsertBulk {
	cpcb.conflict = append(cpcb.conflict, sql.ConflictColumns(columns...))
	return &CodingProblemUpsertBulk{
		create: cpcb,
	}
}

// CodingProblemUpsertBulk is the builder for "upsert"-ing
// a bulk of CodingProblem nodes.
type CodingProblemUpsertBulk struct {
	create *CodingProblemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CodingProblem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CodingProblemUpsertBulk) UpdateNewValues() *CodingProblemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(codingproblem.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CodingProblem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CodingProblemUpsertBulk) Ignore() *CodingProblemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodingProblemUpsertBulk) DoNothing() *CodingProblemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodingProblemCreateBulk.OnConflict
// documentation for more info.
func (u *CodingProblemUpsertBulk) Update(set func(*CodingProblemUpsert)) *CodingProblemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodingProblemUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *CodingProblemUpsertBulk) SetCreateTime(v time.Time) *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *CodingProblemUpsertBulk) UpdateCreateTime() *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CodingProblemUpsertBulk) SetUpdateTime(v time.Time) *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CodingProblemUpsertBulk) UpdateUpdateTime() *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *CodingProblemUpsertBulk) SetName(v string) *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CodingProblemUpsertBulk) UpdateName() *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateName()
	})
}

// SetStatement sets the "statement" field.
func (u *CodingProblemUpsertBulk) SetStatement(v string) *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetStatement(v)
	})
}

// UpdateStatement sets the "statement" field to the value that was provided on create.
func (u *CodingProblemUpsertBulk) UpdateStatement() *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateStatement()
	})
}

// SetSkeleton sets the "skeleton" field.
func (u *CodingProblemUpsertBulk) SetSkeleton(v string) *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetSkeleton(v)
	})
}

// UpdateSkeleton sets the "skeleton" field to the value that was provided on create.
func (u *CodingProblemUpsertBulk) UpdateSkeleton() *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateSkeleton()
	})
}

// SetReleased sets the "released" field.
func (u *CodingProblemUpsertBulk) SetReleased(v bool) *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetReleased(v)
	})
}

// UpdateReleased sets the "released" field to the value that was provided on create.
func (u *CodingProblemUpsertBulk) UpdateReleased() *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateReleased()
	})
}

// SetDeadline sets the "deadline" field.
func (u *CodingProblemUpsertBulk) SetDeadline(v time.Time) *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.SetDeadline(v)
	})
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *CodingProblemUpsertBulk) UpdateDeadline() *CodingProblemUpsertBulk {
	return u.Update(func(s *CodingProblemUpsert) {
		s.UpdateDeadline()
	})
}

// Exec executes the query.
func (u *CodingProblemUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the CodingProblemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for CodingProblemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodingProblemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
