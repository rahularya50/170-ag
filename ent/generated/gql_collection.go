// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cd *CodingDraftQuery) CollectFields(ctx context.Context, satisfies ...string) *CodingDraftQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		cd = cd.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return cd
}

func (cd *CodingDraftQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CodingDraftQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "author":
			cd = cd.WithAuthor(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "coding_problem":
			cd = cd.WithCodingProblem(func(query *CodingProblemQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return cd
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cp *CodingProblemQuery) CollectFields(ctx context.Context, satisfies ...string) *CodingProblemQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		cp = cp.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return cp
}

func (cp *CodingProblemQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CodingProblemQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "drafts":
			cp = cp.WithDrafts(func(query *CodingDraftQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return cp
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cs *CodingSubmissionQuery) CollectFields(ctx context.Context, satisfies ...string) *CodingSubmissionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		cs = cs.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return cs
}

func (cs *CodingSubmissionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CodingSubmissionQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "author":
			cs = cs.WithAuthor(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "coding_problem":
			cs = cs.WithCodingProblem(func(query *CodingProblemQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return cs
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	return u
}
