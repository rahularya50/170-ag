// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingproblemstaffdata"
	"170-ag/ent/generated/predicate"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingProblemStaffDataUpdate is the builder for updating CodingProblemStaffData entities.
type CodingProblemStaffDataUpdate struct {
	config
	hooks    []Hook
	mutation *CodingProblemStaffDataMutation
}

// Where appends a list predicates to the CodingProblemStaffDataUpdate builder.
func (cpsdu *CodingProblemStaffDataUpdate) Where(ps ...predicate.CodingProblemStaffData) *CodingProblemStaffDataUpdate {
	cpsdu.mutation.Where(ps...)
	return cpsdu
}

// SetInput sets the "input" field.
func (cpsdu *CodingProblemStaffDataUpdate) SetInput(s string) *CodingProblemStaffDataUpdate {
	cpsdu.mutation.SetInput(s)
	return cpsdu
}

// Mutation returns the CodingProblemStaffDataMutation object of the builder.
func (cpsdu *CodingProblemStaffDataUpdate) Mutation() *CodingProblemStaffDataMutation {
	return cpsdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpsdu *CodingProblemStaffDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cpsdu.hooks) == 0 {
		affected, err = cpsdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingProblemStaffDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpsdu.mutation = mutation
			affected, err = cpsdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cpsdu.hooks) - 1; i >= 0; i-- {
			if cpsdu.hooks[i] == nil {
				return 0, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cpsdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpsdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpsdu *CodingProblemStaffDataUpdate) SaveX(ctx context.Context) int {
	affected, err := cpsdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpsdu *CodingProblemStaffDataUpdate) Exec(ctx context.Context) error {
	_, err := cpsdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpsdu *CodingProblemStaffDataUpdate) ExecX(ctx context.Context) {
	if err := cpsdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpsdu *CodingProblemStaffDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingproblemstaffdata.Table,
			Columns: codingproblemstaffdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingproblemstaffdata.FieldID,
			},
		},
	}
	if ps := cpsdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpsdu.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingproblemstaffdata.FieldInput,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpsdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingproblemstaffdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CodingProblemStaffDataUpdateOne is the builder for updating a single CodingProblemStaffData entity.
type CodingProblemStaffDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodingProblemStaffDataMutation
}

// SetInput sets the "input" field.
func (cpsduo *CodingProblemStaffDataUpdateOne) SetInput(s string) *CodingProblemStaffDataUpdateOne {
	cpsduo.mutation.SetInput(s)
	return cpsduo
}

// Mutation returns the CodingProblemStaffDataMutation object of the builder.
func (cpsduo *CodingProblemStaffDataUpdateOne) Mutation() *CodingProblemStaffDataMutation {
	return cpsduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpsduo *CodingProblemStaffDataUpdateOne) Select(field string, fields ...string) *CodingProblemStaffDataUpdateOne {
	cpsduo.fields = append([]string{field}, fields...)
	return cpsduo
}

// Save executes the query and returns the updated CodingProblemStaffData entity.
func (cpsduo *CodingProblemStaffDataUpdateOne) Save(ctx context.Context) (*CodingProblemStaffData, error) {
	var (
		err  error
		node *CodingProblemStaffData
	)
	if len(cpsduo.hooks) == 0 {
		node, err = cpsduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingProblemStaffDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpsduo.mutation = mutation
			node, err = cpsduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpsduo.hooks) - 1; i >= 0; i-- {
			if cpsduo.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cpsduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpsduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpsduo *CodingProblemStaffDataUpdateOne) SaveX(ctx context.Context) *CodingProblemStaffData {
	node, err := cpsduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpsduo *CodingProblemStaffDataUpdateOne) Exec(ctx context.Context) error {
	_, err := cpsduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpsduo *CodingProblemStaffDataUpdateOne) ExecX(ctx context.Context) {
	if err := cpsduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpsduo *CodingProblemStaffDataUpdateOne) sqlSave(ctx context.Context) (_node *CodingProblemStaffData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingproblemstaffdata.Table,
			Columns: codingproblemstaffdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingproblemstaffdata.FieldID,
			},
		},
	}
	id, ok := cpsduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CodingProblemStaffData.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cpsduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codingproblemstaffdata.FieldID)
		for _, f := range fields {
			if !codingproblemstaffdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != codingproblemstaffdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpsduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpsduo.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingproblemstaffdata.FieldInput,
		})
	}
	_node = &CodingProblemStaffData{config: cpsduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpsduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingproblemstaffdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
