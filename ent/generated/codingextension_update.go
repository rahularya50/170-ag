// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingextension"
	"170-ag/ent/generated/codingproblem"
	"170-ag/ent/generated/predicate"
	"170-ag/ent/generated/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingExtensionUpdate is the builder for updating CodingExtension entities.
type CodingExtensionUpdate struct {
	config
	hooks    []Hook
	mutation *CodingExtensionMutation
}

// Where appends a list predicates to the CodingExtensionUpdate builder.
func (ceu *CodingExtensionUpdate) Where(ps ...predicate.CodingExtension) *CodingExtensionUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetUpdateTime sets the "update_time" field.
func (ceu *CodingExtensionUpdate) SetUpdateTime(t time.Time) *CodingExtensionUpdate {
	ceu.mutation.SetUpdateTime(t)
	return ceu
}

// SetDeadline sets the "deadline" field.
func (ceu *CodingExtensionUpdate) SetDeadline(t time.Time) *CodingExtensionUpdate {
	ceu.mutation.SetDeadline(t)
	return ceu
}

// SetStudentID sets the "student" edge to the User entity by ID.
func (ceu *CodingExtensionUpdate) SetStudentID(id int) *CodingExtensionUpdate {
	ceu.mutation.SetStudentID(id)
	return ceu
}

// SetStudent sets the "student" edge to the User entity.
func (ceu *CodingExtensionUpdate) SetStudent(u *User) *CodingExtensionUpdate {
	return ceu.SetStudentID(u.ID)
}

// SetCodingProblemID sets the "coding_problem" edge to the CodingProblem entity by ID.
func (ceu *CodingExtensionUpdate) SetCodingProblemID(id int) *CodingExtensionUpdate {
	ceu.mutation.SetCodingProblemID(id)
	return ceu
}

// SetCodingProblem sets the "coding_problem" edge to the CodingProblem entity.
func (ceu *CodingExtensionUpdate) SetCodingProblem(c *CodingProblem) *CodingExtensionUpdate {
	return ceu.SetCodingProblemID(c.ID)
}

// Mutation returns the CodingExtensionMutation object of the builder.
func (ceu *CodingExtensionUpdate) Mutation() *CodingExtensionMutation {
	return ceu.mutation
}

// ClearStudent clears the "student" edge to the User entity.
func (ceu *CodingExtensionUpdate) ClearStudent() *CodingExtensionUpdate {
	ceu.mutation.ClearStudent()
	return ceu
}

// ClearCodingProblem clears the "coding_problem" edge to the CodingProblem entity.
func (ceu *CodingExtensionUpdate) ClearCodingProblem() *CodingExtensionUpdate {
	ceu.mutation.ClearCodingProblem()
	return ceu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *CodingExtensionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ceu.defaults(); err != nil {
		return 0, err
	}
	if len(ceu.hooks) == 0 {
		if err = ceu.check(); err != nil {
			return 0, err
		}
		affected, err = ceu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingExtensionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceu.check(); err != nil {
				return 0, err
			}
			ceu.mutation = mutation
			affected, err = ceu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ceu.hooks) - 1; i >= 0; i-- {
			if ceu.hooks[i] == nil {
				return 0, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = ceu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *CodingExtensionUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *CodingExtensionUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *CodingExtensionUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceu *CodingExtensionUpdate) defaults() error {
	if _, ok := ceu.mutation.UpdateTime(); !ok {
		if codingextension.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingextension.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingextension.UpdateDefaultUpdateTime()
		ceu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ceu *CodingExtensionUpdate) check() error {
	if _, ok := ceu.mutation.StudentID(); ceu.mutation.StudentCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingExtension.student"`)
	}
	if _, ok := ceu.mutation.CodingProblemID(); ceu.mutation.CodingProblemCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingExtension.coding_problem"`)
	}
	return nil
}

func (ceu *CodingExtensionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingextension.Table,
			Columns: codingextension.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingextension.FieldID,
			},
		},
	}
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingextension.FieldUpdateTime,
		})
	}
	if value, ok := ceu.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingextension.FieldDeadline,
		})
	}
	if ceu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.StudentTable,
			Columns: []string{codingextension.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.StudentTable,
			Columns: []string{codingextension.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.CodingProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.CodingProblemTable,
			Columns: []string{codingextension.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.CodingProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.CodingProblemTable,
			Columns: []string{codingextension.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingextension.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CodingExtensionUpdateOne is the builder for updating a single CodingExtension entity.
type CodingExtensionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodingExtensionMutation
}

// SetUpdateTime sets the "update_time" field.
func (ceuo *CodingExtensionUpdateOne) SetUpdateTime(t time.Time) *CodingExtensionUpdateOne {
	ceuo.mutation.SetUpdateTime(t)
	return ceuo
}

// SetDeadline sets the "deadline" field.
func (ceuo *CodingExtensionUpdateOne) SetDeadline(t time.Time) *CodingExtensionUpdateOne {
	ceuo.mutation.SetDeadline(t)
	return ceuo
}

// SetStudentID sets the "student" edge to the User entity by ID.
func (ceuo *CodingExtensionUpdateOne) SetStudentID(id int) *CodingExtensionUpdateOne {
	ceuo.mutation.SetStudentID(id)
	return ceuo
}

// SetStudent sets the "student" edge to the User entity.
func (ceuo *CodingExtensionUpdateOne) SetStudent(u *User) *CodingExtensionUpdateOne {
	return ceuo.SetStudentID(u.ID)
}

// SetCodingProblemID sets the "coding_problem" edge to the CodingProblem entity by ID.
func (ceuo *CodingExtensionUpdateOne) SetCodingProblemID(id int) *CodingExtensionUpdateOne {
	ceuo.mutation.SetCodingProblemID(id)
	return ceuo
}

// SetCodingProblem sets the "coding_problem" edge to the CodingProblem entity.
func (ceuo *CodingExtensionUpdateOne) SetCodingProblem(c *CodingProblem) *CodingExtensionUpdateOne {
	return ceuo.SetCodingProblemID(c.ID)
}

// Mutation returns the CodingExtensionMutation object of the builder.
func (ceuo *CodingExtensionUpdateOne) Mutation() *CodingExtensionMutation {
	return ceuo.mutation
}

// ClearStudent clears the "student" edge to the User entity.
func (ceuo *CodingExtensionUpdateOne) ClearStudent() *CodingExtensionUpdateOne {
	ceuo.mutation.ClearStudent()
	return ceuo
}

// ClearCodingProblem clears the "coding_problem" edge to the CodingProblem entity.
func (ceuo *CodingExtensionUpdateOne) ClearCodingProblem() *CodingExtensionUpdateOne {
	ceuo.mutation.ClearCodingProblem()
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *CodingExtensionUpdateOne) Select(field string, fields ...string) *CodingExtensionUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated CodingExtension entity.
func (ceuo *CodingExtensionUpdateOne) Save(ctx context.Context) (*CodingExtension, error) {
	var (
		err  error
		node *CodingExtension
	)
	if err := ceuo.defaults(); err != nil {
		return nil, err
	}
	if len(ceuo.hooks) == 0 {
		if err = ceuo.check(); err != nil {
			return nil, err
		}
		node, err = ceuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingExtensionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceuo.check(); err != nil {
				return nil, err
			}
			ceuo.mutation = mutation
			node, err = ceuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ceuo.hooks) - 1; i >= 0; i-- {
			if ceuo.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = ceuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *CodingExtensionUpdateOne) SaveX(ctx context.Context) *CodingExtension {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *CodingExtensionUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *CodingExtensionUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceuo *CodingExtensionUpdateOne) defaults() error {
	if _, ok := ceuo.mutation.UpdateTime(); !ok {
		if codingextension.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingextension.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingextension.UpdateDefaultUpdateTime()
		ceuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ceuo *CodingExtensionUpdateOne) check() error {
	if _, ok := ceuo.mutation.StudentID(); ceuo.mutation.StudentCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingExtension.student"`)
	}
	if _, ok := ceuo.mutation.CodingProblemID(); ceuo.mutation.CodingProblemCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingExtension.coding_problem"`)
	}
	return nil
}

func (ceuo *CodingExtensionUpdateOne) sqlSave(ctx context.Context) (_node *CodingExtension, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingextension.Table,
			Columns: codingextension.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingextension.FieldID,
			},
		},
	}
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CodingExtension.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codingextension.FieldID)
		for _, f := range fields {
			if !codingextension.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != codingextension.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingextension.FieldUpdateTime,
		})
	}
	if value, ok := ceuo.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingextension.FieldDeadline,
		})
	}
	if ceuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.StudentTable,
			Columns: []string{codingextension.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.StudentTable,
			Columns: []string{codingextension.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.CodingProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.CodingProblemTable,
			Columns: []string{codingextension.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.CodingProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   codingextension.CodingProblemTable,
			Columns: []string{codingextension.CodingProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingproblem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CodingExtension{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingextension.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
