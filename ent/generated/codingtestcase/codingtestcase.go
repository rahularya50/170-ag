// Code generated by entc, DO NOT EDIT.

package codingtestcase

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the codingtestcase type in the database.
	Label = "coding_test_case"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldPoints holds the string denoting the points field in the database.
	FieldPoints = "points"
	// FieldVisibility holds the string denoting the visibility field in the database.
	FieldVisibility = "visibility"
	// EdgeCodingProblem holds the string denoting the coding_problem edge name in mutations.
	EdgeCodingProblem = "coding_problem"
	// EdgeData holds the string denoting the data edge name in mutations.
	EdgeData = "data"
	// Table holds the table name of the codingtestcase in the database.
	Table = "coding_test_cases"
	// CodingProblemTable is the table that holds the coding_problem relation/edge.
	CodingProblemTable = "coding_test_cases"
	// CodingProblemInverseTable is the table name for the CodingProblem entity.
	// It exists in this package in order to avoid circular dependency with the "codingproblem" package.
	CodingProblemInverseTable = "coding_problems"
	// CodingProblemColumn is the table column denoting the coding_problem relation/edge.
	CodingProblemColumn = "coding_problem_test_cases"
	// DataTable is the table that holds the data relation/edge.
	DataTable = "coding_test_cases"
	// DataInverseTable is the table name for the CodingTestCaseData entity.
	// It exists in this package in order to avoid circular dependency with the "codingtestcasedata" package.
	DataInverseTable = "coding_test_case_data"
	// DataColumn is the table column denoting the data relation/edge.
	DataColumn = "coding_test_case_data_test_case"
)

// Columns holds all SQL columns for codingtestcase fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldPoints,
	FieldVisibility,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "coding_test_cases"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"coding_problem_test_cases",
	"coding_test_case_data_test_case",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "170-ag/ent/generated/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultPoints holds the default value on creation for the "points" field.
	DefaultPoints int
	// PointsValidator is a validator for the "points" field. It is called by the builders before save.
	PointsValidator func(int) error
)

// Visibility defines the type for the "visibility" enum field.
type Visibility string

// VisibilityPrivate is the default value of the Visibility enum.
const DefaultVisibility = VisibilityPrivate

// Visibility values.
const (
	VisibilityPrivate   Visibility = "PRIVATE"
	VisibilityCollapsed Visibility = "COLLAPSED"
	VisibilityExpanded  Visibility = "EXPANDED"
)

func (v Visibility) String() string {
	return string(v)
}

// VisibilityValidator is a validator for the "visibility" field enum values. It is called by the builders before save.
func VisibilityValidator(v Visibility) error {
	switch v {
	case VisibilityPrivate, VisibilityCollapsed, VisibilityExpanded:
		return nil
	default:
		return fmt.Errorf("codingtestcase: invalid enum value for visibility field: %q", v)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (v Visibility) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(v.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (v *Visibility) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*v = Visibility(str)
	if err := VisibilityValidator(*v); err != nil {
		return fmt.Errorf("%s is not a valid Visibility", str)
	}
	return nil
}
