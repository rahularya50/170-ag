// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingsubmission"
	"170-ag/ent/generated/codingsubmissionstaffdata"
	"170-ag/ent/generated/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingSubmissionStaffDataUpdate is the builder for updating CodingSubmissionStaffData entities.
type CodingSubmissionStaffDataUpdate struct {
	config
	hooks    []Hook
	mutation *CodingSubmissionStaffDataMutation
}

// Where appends a list predicates to the CodingSubmissionStaffDataUpdate builder.
func (cssdu *CodingSubmissionStaffDataUpdate) Where(ps ...predicate.CodingSubmissionStaffData) *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.Where(ps...)
	return cssdu
}

// SetUpdateTime sets the "update_time" field.
func (cssdu *CodingSubmissionStaffDataUpdate) SetUpdateTime(t time.Time) *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.SetUpdateTime(t)
	return cssdu
}

// SetExecutionID sets the "execution_id" field.
func (cssdu *CodingSubmissionStaffDataUpdate) SetExecutionID(i int64) *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.ResetExecutionID()
	cssdu.mutation.SetExecutionID(i)
	return cssdu
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (cssdu *CodingSubmissionStaffDataUpdate) SetNillableExecutionID(i *int64) *CodingSubmissionStaffDataUpdate {
	if i != nil {
		cssdu.SetExecutionID(*i)
	}
	return cssdu
}

// AddExecutionID adds i to the "execution_id" field.
func (cssdu *CodingSubmissionStaffDataUpdate) AddExecutionID(i int64) *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.AddExecutionID(i)
	return cssdu
}

// ClearExecutionID clears the value of the "execution_id" field.
func (cssdu *CodingSubmissionStaffDataUpdate) ClearExecutionID() *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.ClearExecutionID()
	return cssdu
}

// SetInput sets the "input" field.
func (cssdu *CodingSubmissionStaffDataUpdate) SetInput(s string) *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.SetInput(s)
	return cssdu
}

// SetOutput sets the "output" field.
func (cssdu *CodingSubmissionStaffDataUpdate) SetOutput(s string) *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.SetOutput(s)
	return cssdu
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (cssdu *CodingSubmissionStaffDataUpdate) SetNillableOutput(s *string) *CodingSubmissionStaffDataUpdate {
	if s != nil {
		cssdu.SetOutput(*s)
	}
	return cssdu
}

// ClearOutput clears the value of the "output" field.
func (cssdu *CodingSubmissionStaffDataUpdate) ClearOutput() *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.ClearOutput()
	return cssdu
}

// SetStderr sets the "stderr" field.
func (cssdu *CodingSubmissionStaffDataUpdate) SetStderr(s string) *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.SetStderr(s)
	return cssdu
}

// SetNillableStderr sets the "stderr" field if the given value is not nil.
func (cssdu *CodingSubmissionStaffDataUpdate) SetNillableStderr(s *string) *CodingSubmissionStaffDataUpdate {
	if s != nil {
		cssdu.SetStderr(*s)
	}
	return cssdu
}

// ClearStderr clears the value of the "stderr" field.
func (cssdu *CodingSubmissionStaffDataUpdate) ClearStderr() *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.ClearStderr()
	return cssdu
}

// SetExitError sets the "exit_error" field.
func (cssdu *CodingSubmissionStaffDataUpdate) SetExitError(s string) *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.SetExitError(s)
	return cssdu
}

// SetNillableExitError sets the "exit_error" field if the given value is not nil.
func (cssdu *CodingSubmissionStaffDataUpdate) SetNillableExitError(s *string) *CodingSubmissionStaffDataUpdate {
	if s != nil {
		cssdu.SetExitError(*s)
	}
	return cssdu
}

// ClearExitError clears the value of the "exit_error" field.
func (cssdu *CodingSubmissionStaffDataUpdate) ClearExitError() *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.ClearExitError()
	return cssdu
}

// SetCodingSubmissionID sets the "coding_submission" edge to the CodingSubmission entity by ID.
func (cssdu *CodingSubmissionStaffDataUpdate) SetCodingSubmissionID(id int) *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.SetCodingSubmissionID(id)
	return cssdu
}

// SetCodingSubmission sets the "coding_submission" edge to the CodingSubmission entity.
func (cssdu *CodingSubmissionStaffDataUpdate) SetCodingSubmission(c *CodingSubmission) *CodingSubmissionStaffDataUpdate {
	return cssdu.SetCodingSubmissionID(c.ID)
}

// Mutation returns the CodingSubmissionStaffDataMutation object of the builder.
func (cssdu *CodingSubmissionStaffDataUpdate) Mutation() *CodingSubmissionStaffDataMutation {
	return cssdu.mutation
}

// ClearCodingSubmission clears the "coding_submission" edge to the CodingSubmission entity.
func (cssdu *CodingSubmissionStaffDataUpdate) ClearCodingSubmission() *CodingSubmissionStaffDataUpdate {
	cssdu.mutation.ClearCodingSubmission()
	return cssdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cssdu *CodingSubmissionStaffDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cssdu.defaults(); err != nil {
		return 0, err
	}
	if len(cssdu.hooks) == 0 {
		if err = cssdu.check(); err != nil {
			return 0, err
		}
		affected, err = cssdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingSubmissionStaffDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cssdu.check(); err != nil {
				return 0, err
			}
			cssdu.mutation = mutation
			affected, err = cssdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cssdu.hooks) - 1; i >= 0; i-- {
			if cssdu.hooks[i] == nil {
				return 0, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cssdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cssdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cssdu *CodingSubmissionStaffDataUpdate) SaveX(ctx context.Context) int {
	affected, err := cssdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cssdu *CodingSubmissionStaffDataUpdate) Exec(ctx context.Context) error {
	_, err := cssdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cssdu *CodingSubmissionStaffDataUpdate) ExecX(ctx context.Context) {
	if err := cssdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cssdu *CodingSubmissionStaffDataUpdate) defaults() error {
	if _, ok := cssdu.mutation.UpdateTime(); !ok {
		if codingsubmissionstaffdata.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingsubmissionstaffdata.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingsubmissionstaffdata.UpdateDefaultUpdateTime()
		cssdu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cssdu *CodingSubmissionStaffDataUpdate) check() error {
	if v, ok := cssdu.mutation.Output(); ok {
		if err := codingsubmissionstaffdata.OutputValidator(v); err != nil {
			return &ValidationError{Name: "output", err: fmt.Errorf(`generated: validator failed for field "CodingSubmissionStaffData.output": %w`, err)}
		}
	}
	if v, ok := cssdu.mutation.Stderr(); ok {
		if err := codingsubmissionstaffdata.StderrValidator(v); err != nil {
			return &ValidationError{Name: "stderr", err: fmt.Errorf(`generated: validator failed for field "CodingSubmissionStaffData.stderr": %w`, err)}
		}
	}
	if v, ok := cssdu.mutation.ExitError(); ok {
		if err := codingsubmissionstaffdata.ExitErrorValidator(v); err != nil {
			return &ValidationError{Name: "exit_error", err: fmt.Errorf(`generated: validator failed for field "CodingSubmissionStaffData.exit_error": %w`, err)}
		}
	}
	if _, ok := cssdu.mutation.CodingSubmissionID(); cssdu.mutation.CodingSubmissionCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingSubmissionStaffData.coding_submission"`)
	}
	return nil
}

func (cssdu *CodingSubmissionStaffDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingsubmissionstaffdata.Table,
			Columns: codingsubmissionstaffdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingsubmissionstaffdata.FieldID,
			},
		},
	}
	if ps := cssdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cssdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldUpdateTime,
		})
	}
	if value, ok := cssdu.mutation.ExecutionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldExecutionID,
		})
	}
	if value, ok := cssdu.mutation.AddedExecutionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldExecutionID,
		})
	}
	if cssdu.mutation.ExecutionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: codingsubmissionstaffdata.FieldExecutionID,
		})
	}
	if value, ok := cssdu.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldInput,
		})
	}
	if value, ok := cssdu.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldOutput,
		})
	}
	if cssdu.mutation.OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: codingsubmissionstaffdata.FieldOutput,
		})
	}
	if value, ok := cssdu.mutation.Stderr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldStderr,
		})
	}
	if cssdu.mutation.StderrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: codingsubmissionstaffdata.FieldStderr,
		})
	}
	if value, ok := cssdu.mutation.ExitError(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldExitError,
		})
	}
	if cssdu.mutation.ExitErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: codingsubmissionstaffdata.FieldExitError,
		})
	}
	if cssdu.mutation.CodingSubmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingsubmissionstaffdata.CodingSubmissionTable,
			Columns: []string{codingsubmissionstaffdata.CodingSubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingsubmission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cssdu.mutation.CodingSubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingsubmissionstaffdata.CodingSubmissionTable,
			Columns: []string{codingsubmissionstaffdata.CodingSubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingsubmission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cssdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingsubmissionstaffdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CodingSubmissionStaffDataUpdateOne is the builder for updating a single CodingSubmissionStaffData entity.
type CodingSubmissionStaffDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodingSubmissionStaffDataMutation
}

// SetUpdateTime sets the "update_time" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetUpdateTime(t time.Time) *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.SetUpdateTime(t)
	return cssduo
}

// SetExecutionID sets the "execution_id" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetExecutionID(i int64) *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.ResetExecutionID()
	cssduo.mutation.SetExecutionID(i)
	return cssduo
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetNillableExecutionID(i *int64) *CodingSubmissionStaffDataUpdateOne {
	if i != nil {
		cssduo.SetExecutionID(*i)
	}
	return cssduo
}

// AddExecutionID adds i to the "execution_id" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) AddExecutionID(i int64) *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.AddExecutionID(i)
	return cssduo
}

// ClearExecutionID clears the value of the "execution_id" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) ClearExecutionID() *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.ClearExecutionID()
	return cssduo
}

// SetInput sets the "input" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetInput(s string) *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.SetInput(s)
	return cssduo
}

// SetOutput sets the "output" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetOutput(s string) *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.SetOutput(s)
	return cssduo
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetNillableOutput(s *string) *CodingSubmissionStaffDataUpdateOne {
	if s != nil {
		cssduo.SetOutput(*s)
	}
	return cssduo
}

// ClearOutput clears the value of the "output" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) ClearOutput() *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.ClearOutput()
	return cssduo
}

// SetStderr sets the "stderr" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetStderr(s string) *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.SetStderr(s)
	return cssduo
}

// SetNillableStderr sets the "stderr" field if the given value is not nil.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetNillableStderr(s *string) *CodingSubmissionStaffDataUpdateOne {
	if s != nil {
		cssduo.SetStderr(*s)
	}
	return cssduo
}

// ClearStderr clears the value of the "stderr" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) ClearStderr() *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.ClearStderr()
	return cssduo
}

// SetExitError sets the "exit_error" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetExitError(s string) *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.SetExitError(s)
	return cssduo
}

// SetNillableExitError sets the "exit_error" field if the given value is not nil.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetNillableExitError(s *string) *CodingSubmissionStaffDataUpdateOne {
	if s != nil {
		cssduo.SetExitError(*s)
	}
	return cssduo
}

// ClearExitError clears the value of the "exit_error" field.
func (cssduo *CodingSubmissionStaffDataUpdateOne) ClearExitError() *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.ClearExitError()
	return cssduo
}

// SetCodingSubmissionID sets the "coding_submission" edge to the CodingSubmission entity by ID.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetCodingSubmissionID(id int) *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.SetCodingSubmissionID(id)
	return cssduo
}

// SetCodingSubmission sets the "coding_submission" edge to the CodingSubmission entity.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SetCodingSubmission(c *CodingSubmission) *CodingSubmissionStaffDataUpdateOne {
	return cssduo.SetCodingSubmissionID(c.ID)
}

// Mutation returns the CodingSubmissionStaffDataMutation object of the builder.
func (cssduo *CodingSubmissionStaffDataUpdateOne) Mutation() *CodingSubmissionStaffDataMutation {
	return cssduo.mutation
}

// ClearCodingSubmission clears the "coding_submission" edge to the CodingSubmission entity.
func (cssduo *CodingSubmissionStaffDataUpdateOne) ClearCodingSubmission() *CodingSubmissionStaffDataUpdateOne {
	cssduo.mutation.ClearCodingSubmission()
	return cssduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cssduo *CodingSubmissionStaffDataUpdateOne) Select(field string, fields ...string) *CodingSubmissionStaffDataUpdateOne {
	cssduo.fields = append([]string{field}, fields...)
	return cssduo
}

// Save executes the query and returns the updated CodingSubmissionStaffData entity.
func (cssduo *CodingSubmissionStaffDataUpdateOne) Save(ctx context.Context) (*CodingSubmissionStaffData, error) {
	var (
		err  error
		node *CodingSubmissionStaffData
	)
	if err := cssduo.defaults(); err != nil {
		return nil, err
	}
	if len(cssduo.hooks) == 0 {
		if err = cssduo.check(); err != nil {
			return nil, err
		}
		node, err = cssduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CodingSubmissionStaffDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cssduo.check(); err != nil {
				return nil, err
			}
			cssduo.mutation = mutation
			node, err = cssduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cssduo.hooks) - 1; i >= 0; i-- {
			if cssduo.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = cssduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cssduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cssduo *CodingSubmissionStaffDataUpdateOne) SaveX(ctx context.Context) *CodingSubmissionStaffData {
	node, err := cssduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cssduo *CodingSubmissionStaffDataUpdateOne) Exec(ctx context.Context) error {
	_, err := cssduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cssduo *CodingSubmissionStaffDataUpdateOne) ExecX(ctx context.Context) {
	if err := cssduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cssduo *CodingSubmissionStaffDataUpdateOne) defaults() error {
	if _, ok := cssduo.mutation.UpdateTime(); !ok {
		if codingsubmissionstaffdata.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized codingsubmissionstaffdata.UpdateDefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := codingsubmissionstaffdata.UpdateDefaultUpdateTime()
		cssduo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cssduo *CodingSubmissionStaffDataUpdateOne) check() error {
	if v, ok := cssduo.mutation.Output(); ok {
		if err := codingsubmissionstaffdata.OutputValidator(v); err != nil {
			return &ValidationError{Name: "output", err: fmt.Errorf(`generated: validator failed for field "CodingSubmissionStaffData.output": %w`, err)}
		}
	}
	if v, ok := cssduo.mutation.Stderr(); ok {
		if err := codingsubmissionstaffdata.StderrValidator(v); err != nil {
			return &ValidationError{Name: "stderr", err: fmt.Errorf(`generated: validator failed for field "CodingSubmissionStaffData.stderr": %w`, err)}
		}
	}
	if v, ok := cssduo.mutation.ExitError(); ok {
		if err := codingsubmissionstaffdata.ExitErrorValidator(v); err != nil {
			return &ValidationError{Name: "exit_error", err: fmt.Errorf(`generated: validator failed for field "CodingSubmissionStaffData.exit_error": %w`, err)}
		}
	}
	if _, ok := cssduo.mutation.CodingSubmissionID(); cssduo.mutation.CodingSubmissionCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "CodingSubmissionStaffData.coding_submission"`)
	}
	return nil
}

func (cssduo *CodingSubmissionStaffDataUpdateOne) sqlSave(ctx context.Context) (_node *CodingSubmissionStaffData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingsubmissionstaffdata.Table,
			Columns: codingsubmissionstaffdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingsubmissionstaffdata.FieldID,
			},
		},
	}
	id, ok := cssduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "CodingSubmissionStaffData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cssduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codingsubmissionstaffdata.FieldID)
		for _, f := range fields {
			if !codingsubmissionstaffdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != codingsubmissionstaffdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cssduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cssduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldUpdateTime,
		})
	}
	if value, ok := cssduo.mutation.ExecutionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldExecutionID,
		})
	}
	if value, ok := cssduo.mutation.AddedExecutionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldExecutionID,
		})
	}
	if cssduo.mutation.ExecutionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: codingsubmissionstaffdata.FieldExecutionID,
		})
	}
	if value, ok := cssduo.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldInput,
		})
	}
	if value, ok := cssduo.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldOutput,
		})
	}
	if cssduo.mutation.OutputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: codingsubmissionstaffdata.FieldOutput,
		})
	}
	if value, ok := cssduo.mutation.Stderr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldStderr,
		})
	}
	if cssduo.mutation.StderrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: codingsubmissionstaffdata.FieldStderr,
		})
	}
	if value, ok := cssduo.mutation.ExitError(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: codingsubmissionstaffdata.FieldExitError,
		})
	}
	if cssduo.mutation.ExitErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: codingsubmissionstaffdata.FieldExitError,
		})
	}
	if cssduo.mutation.CodingSubmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingsubmissionstaffdata.CodingSubmissionTable,
			Columns: []string{codingsubmissionstaffdata.CodingSubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingsubmission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cssduo.mutation.CodingSubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   codingsubmissionstaffdata.CodingSubmissionTable,
			Columns: []string{codingsubmissionstaffdata.CodingSubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: codingsubmission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CodingSubmissionStaffData{config: cssduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cssduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{codingsubmissionstaffdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
