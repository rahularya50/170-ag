// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/codingtestcase"
	"170-ag/ent/generated/codingtestcasedata"
	"170-ag/ent/generated/predicate"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CodingTestCaseDataQuery is the builder for querying CodingTestCaseData entities.
type CodingTestCaseDataQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CodingTestCaseData
	// eager-loading edges.
	withTestCase *CodingTestCaseQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CodingTestCaseDataQuery builder.
func (ctcdq *CodingTestCaseDataQuery) Where(ps ...predicate.CodingTestCaseData) *CodingTestCaseDataQuery {
	ctcdq.predicates = append(ctcdq.predicates, ps...)
	return ctcdq
}

// Limit adds a limit step to the query.
func (ctcdq *CodingTestCaseDataQuery) Limit(limit int) *CodingTestCaseDataQuery {
	ctcdq.limit = &limit
	return ctcdq
}

// Offset adds an offset step to the query.
func (ctcdq *CodingTestCaseDataQuery) Offset(offset int) *CodingTestCaseDataQuery {
	ctcdq.offset = &offset
	return ctcdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ctcdq *CodingTestCaseDataQuery) Unique(unique bool) *CodingTestCaseDataQuery {
	ctcdq.unique = &unique
	return ctcdq
}

// Order adds an order step to the query.
func (ctcdq *CodingTestCaseDataQuery) Order(o ...OrderFunc) *CodingTestCaseDataQuery {
	ctcdq.order = append(ctcdq.order, o...)
	return ctcdq
}

// QueryTestCase chains the current query on the "test_case" edge.
func (ctcdq *CodingTestCaseDataQuery) QueryTestCase() *CodingTestCaseQuery {
	query := &CodingTestCaseQuery{config: ctcdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ctcdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ctcdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(codingtestcasedata.Table, codingtestcasedata.FieldID, selector),
			sqlgraph.To(codingtestcase.Table, codingtestcase.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, codingtestcasedata.TestCaseTable, codingtestcasedata.TestCaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(ctcdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CodingTestCaseData entity from the query.
// Returns a *NotFoundError when no CodingTestCaseData was found.
func (ctcdq *CodingTestCaseDataQuery) First(ctx context.Context) (*CodingTestCaseData, error) {
	nodes, err := ctcdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{codingtestcasedata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ctcdq *CodingTestCaseDataQuery) FirstX(ctx context.Context) *CodingTestCaseData {
	node, err := ctcdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CodingTestCaseData ID from the query.
// Returns a *NotFoundError when no CodingTestCaseData ID was found.
func (ctcdq *CodingTestCaseDataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ctcdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{codingtestcasedata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ctcdq *CodingTestCaseDataQuery) FirstIDX(ctx context.Context) int {
	id, err := ctcdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CodingTestCaseData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one CodingTestCaseData entity is not found.
// Returns a *NotFoundError when no CodingTestCaseData entities are found.
func (ctcdq *CodingTestCaseDataQuery) Only(ctx context.Context) (*CodingTestCaseData, error) {
	nodes, err := ctcdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{codingtestcasedata.Label}
	default:
		return nil, &NotSingularError{codingtestcasedata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ctcdq *CodingTestCaseDataQuery) OnlyX(ctx context.Context) *CodingTestCaseData {
	node, err := ctcdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CodingTestCaseData ID in the query.
// Returns a *NotSingularError when exactly one CodingTestCaseData ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ctcdq *CodingTestCaseDataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ctcdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{codingtestcasedata.Label}
	default:
		err = &NotSingularError{codingtestcasedata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ctcdq *CodingTestCaseDataQuery) OnlyIDX(ctx context.Context) int {
	id, err := ctcdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CodingTestCaseDataSlice.
func (ctcdq *CodingTestCaseDataQuery) All(ctx context.Context) ([]*CodingTestCaseData, error) {
	if err := ctcdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ctcdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ctcdq *CodingTestCaseDataQuery) AllX(ctx context.Context) []*CodingTestCaseData {
	nodes, err := ctcdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CodingTestCaseData IDs.
func (ctcdq *CodingTestCaseDataQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ctcdq.Select(codingtestcasedata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ctcdq *CodingTestCaseDataQuery) IDsX(ctx context.Context) []int {
	ids, err := ctcdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ctcdq *CodingTestCaseDataQuery) Count(ctx context.Context) (int, error) {
	if err := ctcdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ctcdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ctcdq *CodingTestCaseDataQuery) CountX(ctx context.Context) int {
	count, err := ctcdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ctcdq *CodingTestCaseDataQuery) Exist(ctx context.Context) (bool, error) {
	if err := ctcdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ctcdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ctcdq *CodingTestCaseDataQuery) ExistX(ctx context.Context) bool {
	exist, err := ctcdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CodingTestCaseDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ctcdq *CodingTestCaseDataQuery) Clone() *CodingTestCaseDataQuery {
	if ctcdq == nil {
		return nil
	}
	return &CodingTestCaseDataQuery{
		config:       ctcdq.config,
		limit:        ctcdq.limit,
		offset:       ctcdq.offset,
		order:        append([]OrderFunc{}, ctcdq.order...),
		predicates:   append([]predicate.CodingTestCaseData{}, ctcdq.predicates...),
		withTestCase: ctcdq.withTestCase.Clone(),
		// clone intermediate query.
		sql:  ctcdq.sql.Clone(),
		path: ctcdq.path,
	}
}

// WithTestCase tells the query-builder to eager-load the nodes that are connected to
// the "test_case" edge. The optional arguments are used to configure the query builder of the edge.
func (ctcdq *CodingTestCaseDataQuery) WithTestCase(opts ...func(*CodingTestCaseQuery)) *CodingTestCaseDataQuery {
	query := &CodingTestCaseQuery{config: ctcdq.config}
	for _, opt := range opts {
		opt(query)
	}
	ctcdq.withTestCase = query
	return ctcdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CodingTestCaseData.Query().
//		GroupBy(codingtestcasedata.FieldCreateTime).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
//
func (ctcdq *CodingTestCaseDataQuery) GroupBy(field string, fields ...string) *CodingTestCaseDataGroupBy {
	group := &CodingTestCaseDataGroupBy{config: ctcdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ctcdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ctcdq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.CodingTestCaseData.Query().
//		Select(codingtestcasedata.FieldCreateTime).
//		Scan(ctx, &v)
//
func (ctcdq *CodingTestCaseDataQuery) Select(fields ...string) *CodingTestCaseDataSelect {
	ctcdq.fields = append(ctcdq.fields, fields...)
	return &CodingTestCaseDataSelect{CodingTestCaseDataQuery: ctcdq}
}

func (ctcdq *CodingTestCaseDataQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ctcdq.fields {
		if !codingtestcasedata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if ctcdq.path != nil {
		prev, err := ctcdq.path(ctx)
		if err != nil {
			return err
		}
		ctcdq.sql = prev
	}
	if codingtestcasedata.Policy == nil {
		return errors.New("generated: uninitialized codingtestcasedata.Policy (forgotten import generated/runtime?)")
	}
	if err := codingtestcasedata.Policy.EvalQuery(ctx, ctcdq); err != nil {
		return err
	}
	return nil
}

func (ctcdq *CodingTestCaseDataQuery) sqlAll(ctx context.Context) ([]*CodingTestCaseData, error) {
	var (
		nodes       = []*CodingTestCaseData{}
		_spec       = ctcdq.querySpec()
		loadedTypes = [1]bool{
			ctcdq.withTestCase != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &CodingTestCaseData{config: ctcdq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("generated: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ctcdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ctcdq.withTestCase; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*CodingTestCaseData)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.CodingTestCase(func(s *sql.Selector) {
			s.Where(sql.InValues(codingtestcasedata.TestCaseColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.coding_test_case_data_test_case
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "coding_test_case_data_test_case" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "coding_test_case_data_test_case" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.TestCase = n
		}
	}

	return nodes, nil
}

func (ctcdq *CodingTestCaseDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ctcdq.querySpec()
	_spec.Node.Columns = ctcdq.fields
	if len(ctcdq.fields) > 0 {
		_spec.Unique = ctcdq.unique != nil && *ctcdq.unique
	}
	return sqlgraph.CountNodes(ctx, ctcdq.driver, _spec)
}

func (ctcdq *CodingTestCaseDataQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ctcdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("generated: check existence: %w", err)
	}
	return n > 0, nil
}

func (ctcdq *CodingTestCaseDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   codingtestcasedata.Table,
			Columns: codingtestcasedata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: codingtestcasedata.FieldID,
			},
		},
		From:   ctcdq.sql,
		Unique: true,
	}
	if unique := ctcdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ctcdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, codingtestcasedata.FieldID)
		for i := range fields {
			if fields[i] != codingtestcasedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ctcdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ctcdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ctcdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ctcdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ctcdq *CodingTestCaseDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ctcdq.driver.Dialect())
	t1 := builder.Table(codingtestcasedata.Table)
	columns := ctcdq.fields
	if len(columns) == 0 {
		columns = codingtestcasedata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ctcdq.sql != nil {
		selector = ctcdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ctcdq.unique != nil && *ctcdq.unique {
		selector.Distinct()
	}
	for _, p := range ctcdq.predicates {
		p(selector)
	}
	for _, p := range ctcdq.order {
		p(selector)
	}
	if offset := ctcdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ctcdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CodingTestCaseDataGroupBy is the group-by builder for CodingTestCaseData entities.
type CodingTestCaseDataGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ctcdgb *CodingTestCaseDataGroupBy) Aggregate(fns ...AggregateFunc) *CodingTestCaseDataGroupBy {
	ctcdgb.fns = append(ctcdgb.fns, fns...)
	return ctcdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ctcdgb *CodingTestCaseDataGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ctcdgb.path(ctx)
	if err != nil {
		return err
	}
	ctcdgb.sql = query
	return ctcdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ctcdgb *CodingTestCaseDataGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ctcdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ctcdgb *CodingTestCaseDataGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ctcdgb.fields) > 1 {
		return nil, errors.New("generated: CodingTestCaseDataGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ctcdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ctcdgb *CodingTestCaseDataGroupBy) StringsX(ctx context.Context) []string {
	v, err := ctcdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ctcdgb *CodingTestCaseDataGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ctcdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingtestcasedata.Label}
	default:
		err = fmt.Errorf("generated: CodingTestCaseDataGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ctcdgb *CodingTestCaseDataGroupBy) StringX(ctx context.Context) string {
	v, err := ctcdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ctcdgb *CodingTestCaseDataGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ctcdgb.fields) > 1 {
		return nil, errors.New("generated: CodingTestCaseDataGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ctcdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ctcdgb *CodingTestCaseDataGroupBy) IntsX(ctx context.Context) []int {
	v, err := ctcdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ctcdgb *CodingTestCaseDataGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ctcdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingtestcasedata.Label}
	default:
		err = fmt.Errorf("generated: CodingTestCaseDataGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ctcdgb *CodingTestCaseDataGroupBy) IntX(ctx context.Context) int {
	v, err := ctcdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ctcdgb *CodingTestCaseDataGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ctcdgb.fields) > 1 {
		return nil, errors.New("generated: CodingTestCaseDataGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ctcdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ctcdgb *CodingTestCaseDataGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ctcdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ctcdgb *CodingTestCaseDataGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ctcdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingtestcasedata.Label}
	default:
		err = fmt.Errorf("generated: CodingTestCaseDataGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ctcdgb *CodingTestCaseDataGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ctcdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ctcdgb *CodingTestCaseDataGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ctcdgb.fields) > 1 {
		return nil, errors.New("generated: CodingTestCaseDataGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ctcdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ctcdgb *CodingTestCaseDataGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ctcdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ctcdgb *CodingTestCaseDataGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ctcdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingtestcasedata.Label}
	default:
		err = fmt.Errorf("generated: CodingTestCaseDataGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ctcdgb *CodingTestCaseDataGroupBy) BoolX(ctx context.Context) bool {
	v, err := ctcdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ctcdgb *CodingTestCaseDataGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ctcdgb.fields {
		if !codingtestcasedata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ctcdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ctcdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ctcdgb *CodingTestCaseDataGroupBy) sqlQuery() *sql.Selector {
	selector := ctcdgb.sql.Select()
	aggregation := make([]string, 0, len(ctcdgb.fns))
	for _, fn := range ctcdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ctcdgb.fields)+len(ctcdgb.fns))
		for _, f := range ctcdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ctcdgb.fields...)...)
}

// CodingTestCaseDataSelect is the builder for selecting fields of CodingTestCaseData entities.
type CodingTestCaseDataSelect struct {
	*CodingTestCaseDataQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ctcds *CodingTestCaseDataSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ctcds.prepareQuery(ctx); err != nil {
		return err
	}
	ctcds.sql = ctcds.CodingTestCaseDataQuery.sqlQuery(ctx)
	return ctcds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ctcds *CodingTestCaseDataSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ctcds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ctcds *CodingTestCaseDataSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ctcds.fields) > 1 {
		return nil, errors.New("generated: CodingTestCaseDataSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ctcds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ctcds *CodingTestCaseDataSelect) StringsX(ctx context.Context) []string {
	v, err := ctcds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ctcds *CodingTestCaseDataSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ctcds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingtestcasedata.Label}
	default:
		err = fmt.Errorf("generated: CodingTestCaseDataSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ctcds *CodingTestCaseDataSelect) StringX(ctx context.Context) string {
	v, err := ctcds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ctcds *CodingTestCaseDataSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ctcds.fields) > 1 {
		return nil, errors.New("generated: CodingTestCaseDataSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ctcds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ctcds *CodingTestCaseDataSelect) IntsX(ctx context.Context) []int {
	v, err := ctcds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ctcds *CodingTestCaseDataSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ctcds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingtestcasedata.Label}
	default:
		err = fmt.Errorf("generated: CodingTestCaseDataSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ctcds *CodingTestCaseDataSelect) IntX(ctx context.Context) int {
	v, err := ctcds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ctcds *CodingTestCaseDataSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ctcds.fields) > 1 {
		return nil, errors.New("generated: CodingTestCaseDataSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ctcds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ctcds *CodingTestCaseDataSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ctcds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ctcds *CodingTestCaseDataSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ctcds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingtestcasedata.Label}
	default:
		err = fmt.Errorf("generated: CodingTestCaseDataSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ctcds *CodingTestCaseDataSelect) Float64X(ctx context.Context) float64 {
	v, err := ctcds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ctcds *CodingTestCaseDataSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ctcds.fields) > 1 {
		return nil, errors.New("generated: CodingTestCaseDataSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ctcds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ctcds *CodingTestCaseDataSelect) BoolsX(ctx context.Context) []bool {
	v, err := ctcds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ctcds *CodingTestCaseDataSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ctcds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{codingtestcasedata.Label}
	default:
		err = fmt.Errorf("generated: CodingTestCaseDataSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ctcds *CodingTestCaseDataSelect) BoolX(ctx context.Context) bool {
	v, err := ctcds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ctcds *CodingTestCaseDataSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ctcds.sql.Query()
	if err := ctcds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
