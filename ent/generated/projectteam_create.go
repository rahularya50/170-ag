// Code generated by entc, DO NOT EDIT.

package generated

import (
	"170-ag/ent/generated/projectscore"
	"170-ag/ent/generated/projectteam"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectTeamCreate is the builder for creating a ProjectTeam entity.
type ProjectTeamCreate struct {
	config
	mutation *ProjectTeamMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ptc *ProjectTeamCreate) SetCreateTime(t time.Time) *ProjectTeamCreate {
	ptc.mutation.SetCreateTime(t)
	return ptc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ptc *ProjectTeamCreate) SetNillableCreateTime(t *time.Time) *ProjectTeamCreate {
	if t != nil {
		ptc.SetCreateTime(*t)
	}
	return ptc
}

// SetUpdateTime sets the "update_time" field.
func (ptc *ProjectTeamCreate) SetUpdateTime(t time.Time) *ProjectTeamCreate {
	ptc.mutation.SetUpdateTime(t)
	return ptc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ptc *ProjectTeamCreate) SetNillableUpdateTime(t *time.Time) *ProjectTeamCreate {
	if t != nil {
		ptc.SetUpdateTime(*t)
	}
	return ptc
}

// SetTeamID sets the "team_id" field.
func (ptc *ProjectTeamCreate) SetTeamID(i int32) *ProjectTeamCreate {
	ptc.mutation.SetTeamID(i)
	return ptc
}

// SetName sets the "name" field.
func (ptc *ProjectTeamCreate) SetName(s string) *ProjectTeamCreate {
	ptc.mutation.SetName(s)
	return ptc
}

// AddScoreIDs adds the "scores" edge to the ProjectScore entity by IDs.
func (ptc *ProjectTeamCreate) AddScoreIDs(ids ...int) *ProjectTeamCreate {
	ptc.mutation.AddScoreIDs(ids...)
	return ptc
}

// AddScores adds the "scores" edges to the ProjectScore entity.
func (ptc *ProjectTeamCreate) AddScores(p ...*ProjectScore) *ProjectTeamCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddScoreIDs(ids...)
}

// Mutation returns the ProjectTeamMutation object of the builder.
func (ptc *ProjectTeamCreate) Mutation() *ProjectTeamMutation {
	return ptc.mutation
}

// Save creates the ProjectTeam in the database.
func (ptc *ProjectTeamCreate) Save(ctx context.Context) (*ProjectTeam, error) {
	var (
		err  error
		node *ProjectTeam
	)
	if err := ptc.defaults(); err != nil {
		return nil, err
	}
	if len(ptc.hooks) == 0 {
		if err = ptc.check(); err != nil {
			return nil, err
		}
		node, err = ptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectTeamMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptc.check(); err != nil {
				return nil, err
			}
			ptc.mutation = mutation
			if node, err = ptc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ptc.hooks) - 1; i >= 0; i-- {
			if ptc.hooks[i] == nil {
				return nil, fmt.Errorf("generated: uninitialized hook (forgotten import generated/runtime?)")
			}
			mut = ptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ProjectTeamCreate) SaveX(ctx context.Context) *ProjectTeam {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ProjectTeamCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ProjectTeamCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *ProjectTeamCreate) defaults() error {
	if _, ok := ptc.mutation.CreateTime(); !ok {
		if projectteam.DefaultCreateTime == nil {
			return fmt.Errorf("generated: uninitialized projectteam.DefaultCreateTime (forgotten import generated/runtime?)")
		}
		v := projectteam.DefaultCreateTime()
		ptc.mutation.SetCreateTime(v)
	}
	if _, ok := ptc.mutation.UpdateTime(); !ok {
		if projectteam.DefaultUpdateTime == nil {
			return fmt.Errorf("generated: uninitialized projectteam.DefaultUpdateTime (forgotten import generated/runtime?)")
		}
		v := projectteam.DefaultUpdateTime()
		ptc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ProjectTeamCreate) check() error {
	if _, ok := ptc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`generated: missing required field "ProjectTeam.create_time"`)}
	}
	if _, ok := ptc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`generated: missing required field "ProjectTeam.update_time"`)}
	}
	if _, ok := ptc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`generated: missing required field "ProjectTeam.team_id"`)}
	}
	if _, ok := ptc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ProjectTeam.name"`)}
	}
	if v, ok := ptc.mutation.Name(); ok {
		if err := projectteam.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ProjectTeam.name": %w`, err)}
		}
	}
	return nil
}

func (ptc *ProjectTeamCreate) sqlSave(ctx context.Context) (*ProjectTeam, error) {
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ptc *ProjectTeamCreate) createSpec() (*ProjectTeam, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectTeam{config: ptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: projectteam.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectteam.FieldID,
			},
		}
	)
	_spec.OnConflict = ptc.conflict
	if value, ok := ptc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: projectteam.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ptc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: projectteam.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ptc.mutation.TeamID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: projectteam.FieldTeamID,
		})
		_node.TeamID = value
	}
	if value, ok := ptc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectteam.FieldName,
		})
		_node.Name = value
	}
	if nodes := ptc.mutation.ScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectteam.ScoresTable,
			Columns: []string{projectteam.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectscore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectTeam.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectTeamUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (ptc *ProjectTeamCreate) OnConflict(opts ...sql.ConflictOption) *ProjectTeamUpsertOne {
	ptc.conflict = opts
	return &ProjectTeamUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectTeam.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptc *ProjectTeamCreate) OnConflictColumns(columns ...string) *ProjectTeamUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &ProjectTeamUpsertOne{
		create: ptc,
	}
}

type (
	// ProjectTeamUpsertOne is the builder for "upsert"-ing
	//  one ProjectTeam node.
	ProjectTeamUpsertOne struct {
		create *ProjectTeamCreate
	}

	// ProjectTeamUpsert is the "OnConflict" setter.
	ProjectTeamUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *ProjectTeamUpsert) SetCreateTime(v time.Time) *ProjectTeamUpsert {
	u.Set(projectteam.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *ProjectTeamUpsert) UpdateCreateTime() *ProjectTeamUpsert {
	u.SetExcluded(projectteam.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ProjectTeamUpsert) SetUpdateTime(v time.Time) *ProjectTeamUpsert {
	u.Set(projectteam.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ProjectTeamUpsert) UpdateUpdateTime() *ProjectTeamUpsert {
	u.SetExcluded(projectteam.FieldUpdateTime)
	return u
}

// SetTeamID sets the "team_id" field.
func (u *ProjectTeamUpsert) SetTeamID(v int32) *ProjectTeamUpsert {
	u.Set(projectteam.FieldTeamID, v)
	return u
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *ProjectTeamUpsert) UpdateTeamID() *ProjectTeamUpsert {
	u.SetExcluded(projectteam.FieldTeamID)
	return u
}

// AddTeamID adds v to the "team_id" field.
func (u *ProjectTeamUpsert) AddTeamID(v int32) *ProjectTeamUpsert {
	u.Add(projectteam.FieldTeamID, v)
	return u
}

// SetName sets the "name" field.
func (u *ProjectTeamUpsert) SetName(v string) *ProjectTeamUpsert {
	u.Set(projectteam.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectTeamUpsert) UpdateName() *ProjectTeamUpsert {
	u.SetExcluded(projectteam.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ProjectTeam.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ProjectTeamUpsertOne) UpdateNewValues() *ProjectTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(projectteam.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ProjectTeam.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ProjectTeamUpsertOne) Ignore() *ProjectTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectTeamUpsertOne) DoNothing() *ProjectTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectTeamCreate.OnConflict
// documentation for more info.
func (u *ProjectTeamUpsertOne) Update(set func(*ProjectTeamUpsert)) *ProjectTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectTeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *ProjectTeamUpsertOne) SetCreateTime(v time.Time) *ProjectTeamUpsertOne {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *ProjectTeamUpsertOne) UpdateCreateTime() *ProjectTeamUpsertOne {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ProjectTeamUpsertOne) SetUpdateTime(v time.Time) *ProjectTeamUpsertOne {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ProjectTeamUpsertOne) UpdateUpdateTime() *ProjectTeamUpsertOne {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTeamID sets the "team_id" field.
func (u *ProjectTeamUpsertOne) SetTeamID(v int32) *ProjectTeamUpsertOne {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.SetTeamID(v)
	})
}

// AddTeamID adds v to the "team_id" field.
func (u *ProjectTeamUpsertOne) AddTeamID(v int32) *ProjectTeamUpsertOne {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.AddTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *ProjectTeamUpsertOne) UpdateTeamID() *ProjectTeamUpsertOne {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.UpdateTeamID()
	})
}

// SetName sets the "name" field.
func (u *ProjectTeamUpsertOne) SetName(v string) *ProjectTeamUpsertOne {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectTeamUpsertOne) UpdateName() *ProjectTeamUpsertOne {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *ProjectTeamUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ProjectTeamCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectTeamUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectTeamUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectTeamUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectTeamCreateBulk is the builder for creating many ProjectTeam entities in bulk.
type ProjectTeamCreateBulk struct {
	config
	builders []*ProjectTeamCreate
	conflict []sql.ConflictOption
}

// Save creates the ProjectTeam entities in the database.
func (ptcb *ProjectTeamCreateBulk) Save(ctx context.Context) ([]*ProjectTeam, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ProjectTeam, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectTeamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ProjectTeamCreateBulk) SaveX(ctx context.Context) []*ProjectTeam {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ProjectTeamCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ProjectTeamCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectTeam.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectTeamUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (ptcb *ProjectTeamCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectTeamUpsertBulk {
	ptcb.conflict = opts
	return &ProjectTeamUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectTeam.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptcb *ProjectTeamCreateBulk) OnConflictColumns(columns ...string) *ProjectTeamUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectTeamUpsertBulk{
		create: ptcb,
	}
}

// ProjectTeamUpsertBulk is the builder for "upsert"-ing
// a bulk of ProjectTeam nodes.
type ProjectTeamUpsertBulk struct {
	create *ProjectTeamCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProjectTeam.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ProjectTeamUpsertBulk) UpdateNewValues() *ProjectTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(projectteam.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectTeam.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ProjectTeamUpsertBulk) Ignore() *ProjectTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectTeamUpsertBulk) DoNothing() *ProjectTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectTeamCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectTeamUpsertBulk) Update(set func(*ProjectTeamUpsert)) *ProjectTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectTeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *ProjectTeamUpsertBulk) SetCreateTime(v time.Time) *ProjectTeamUpsertBulk {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *ProjectTeamUpsertBulk) UpdateCreateTime() *ProjectTeamUpsertBulk {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ProjectTeamUpsertBulk) SetUpdateTime(v time.Time) *ProjectTeamUpsertBulk {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ProjectTeamUpsertBulk) UpdateUpdateTime() *ProjectTeamUpsertBulk {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTeamID sets the "team_id" field.
func (u *ProjectTeamUpsertBulk) SetTeamID(v int32) *ProjectTeamUpsertBulk {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.SetTeamID(v)
	})
}

// AddTeamID adds v to the "team_id" field.
func (u *ProjectTeamUpsertBulk) AddTeamID(v int32) *ProjectTeamUpsertBulk {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.AddTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *ProjectTeamUpsertBulk) UpdateTeamID() *ProjectTeamUpsertBulk {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.UpdateTeamID()
	})
}

// SetName sets the "name" field.
func (u *ProjectTeamUpsertBulk) SetName(v string) *ProjectTeamUpsertBulk {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectTeamUpsertBulk) UpdateName() *ProjectTeamUpsertBulk {
	return u.Update(func(s *ProjectTeamUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *ProjectTeamUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the ProjectTeamCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ProjectTeamCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectTeamUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
